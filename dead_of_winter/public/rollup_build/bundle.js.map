{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/itemCardList.js","../../src/survivorList.js","../../src/placeList.js","../../src/riskCardList.js","../../src/game.js","../../src/gameStore.js","../../node_modules/svelte/easing/index.mjs","../../node_modules/svelte/animate/index.mjs","../../node_modules/svelte/transition/index.mjs","../../src/animation.js","../../src/Player.svelte","../../src/Place.svelte","../../src/PlaceList.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","const itemCardList = [\r\n    {\r\n        name: '약',\r\n        description: \"부상 토큰을 하나 제거합니다.\",\r\n        category: '약',\r\n        type: 'execute',\r\n        feature: 'care',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '주사기',\r\n        description: \"부상 토큰을 두개를 제거합니다.\",\r\n        category: '약',\r\n        type: 'execute',\r\n        feature: 'care',\r\n        targetCount: 2\r\n    },\r\n    {\r\n        name: '야구방망이',\r\n        description: \"좀비를 1구를 제거합니다. 위험 노출 주사를 굴립니다.\",\r\n        category: '도구',\r\n        type: 'execute'\r\n    },\r\n    {\r\n        name: '식량1',\r\n        description: \"식량창고에 식량토큰을 하나를 추가합니다.\",\r\n        category: '식량',\r\n        type: 'execute',\r\n        feature: 'food',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '식량2',\r\n        description: \"식량창고에 식량토큰을 두개를 추가합니다.\",\r\n        category: '식량',\r\n        type: 'execute',\r\n        feature: 'food',\r\n        targetCount: 2\r\n    },\r\n    {\r\n        name: '식량3',\r\n        description: \"식량창고에 식량토큰을 세개를 추가합니다.\",\r\n        category: '식량',\r\n        type: 'execute',\r\n        feature: 'food',\r\n        targetCount: 3\r\n    },\r\n    {\r\n        name: '바리게이트',\r\n        description: \"바리게이트를 설치합니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'barricade'\r\n    },\r\n    {\r\n        name: '격투기',\r\n        description: \"좀비를 1구를 제거합니다. 위험 노출 주사를 굴리지 않습니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'attack',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '가위',\r\n        category: '도구',\r\n        description: \"좀비를 1구를 제거합니다. 위험 노출 주사를 굴리지 않습니다.\",\r\n        type: 'execute',\r\n        feature: 'attack',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '확성기',\r\n        description: \"좀비를 3구를 유인합니다.\",\r\n        category: '도구',\r\n        type: 'execute',\r\n        feature: 'invite'\r\n    },\r\n    {\r\n        name: '외부인1',\r\n        description: \"외부인 1명을 피난기지로 보냅니다.\",\r\n        category: '외부인',\r\n        type: 'event',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '외부인2',\r\n        description: \"외부인 2명을 피난기지로 보냅니다.\",\r\n        category: '외부인',\r\n        type: 'event',\r\n        targetCount: 2\r\n    },\r\n    {\r\n        name: '외부인3',\r\n        description: \"외부인 3명을 피난기지로 보냅니다.\",\r\n        category: '외부인',\r\n        type: 'event',\r\n        targetCount: 3\r\n    },\r\n    {\r\n        name: '학교 청사진',\r\n        description: \"학교의 아이템 카드를 획득합니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'search',\r\n        placeNameList: ['학교']\r\n    },\r\n    {\r\n        name: '경찰서 청사진',\r\n        description: \"경찰서의 아이템 카드를 획득합니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'search',\r\n        placeNameList: ['경찰서']\r\n    },\r\n    {\r\n        name: '주유소 청사진',\r\n        description: \"주유소의 아이템 카드를 획득합니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'search',\r\n        placeNameList: ['주유소']\r\n    },\r\n    {\r\n        name: '마트 청사진',\r\n        description: \"마트의 아이템 카드를 획득합니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'search',\r\n        placeNameList: ['마트']\r\n    },\r\n    {\r\n        name: '병원 청사진',\r\n        description: \"병원의 아이템 카드를 획득합니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'search',\r\n        placeNameList: ['병원']\r\n    },\r\n    {\r\n        name: '도서관 청사진',\r\n        description: \"도서관의 아이템 카드를 획득합니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'search',\r\n        placeNameList: ['도서관']\r\n    },\r\n    {\r\n        name: '생존 요리법',\r\n        description: \"피난기지에 음식 토큰 1개를 추가합니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'food',\r\n        place: '피난기지',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '리더십',\r\n        category: '교육',\r\n        description: \"미사용 행동 주사위의 결과값을 1 증가시킵니다.\",\r\n        type: 'execute',\r\n        feature: 'power'\r\n    },\r\n    {\r\n        name: '잡동사니',\r\n        description: \"미사용 행동 주사위의 결과값을 1 증가시킵니다.\",\r\n        category: '도구',\r\n        type: 'execute',\r\n        feature: 'power'\r\n    },\r\n    {\r\n        name: '백과사전',\r\n        description: \"미사용 행동 주사위의 결과값을 1 증가시킵니다.\",\r\n        category: '교육',\r\n        type: 'execute',\r\n        feature: 'power'\r\n    },\r\n    {\r\n        name: '연료',\r\n        description: \"생존자를 이동합니다. 위험 노출 주사위를 굴리지 않습니다.\",\r\n        category: '연료',\r\n        type: 'execute',\r\n        feature: 'safeMove'\r\n    },\r\n    {\r\n        name: '독서등',\r\n        description: \"좀비를 1구를 제거합니다. 위험 노출 주사를 굴립니다.\",\r\n        category: '도구',\r\n        type: 'execute',\r\n        feature: 'attack',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '무전기',\r\n        description: \"좀비를 1구를 제거합니다. 위험 노출 주사를 굴리지 않습니다.\",\r\n        category: '도구',\r\n        type: 'execute',\r\n        feature: 'attack',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '산탄총',\r\n        description: \"좀비를 2구를 제거합니다. 위험 노출 주사를 굴리지 않습니다.\",\r\n        category: '무기',\r\n        type: 'execute',\r\n        feature: 'attack',\r\n        targetCount: 2\r\n    },\r\n    {\r\n        name: '소총',\r\n        description: \"좀비를 2구를 제거합니다. 위험 노출 주사를 굴리지 않습니다.\",\r\n        category: '무기',\r\n        type: 'execute',\r\n        feature: 'attack',\r\n        targetCount: 2\r\n    },\r\n    {\r\n        name: '권총',\r\n        description: \"좀비를 1구를 제거합니다. 위험 노출 주사를 굴리지 않습니다.\",\r\n        category: '무기',\r\n        type: 'execute',\r\n        feature: 'attack',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '주머니칼',\r\n        description: \"좀비를 1구를 제거합니다. 위험 노출 주사를 굴리지 않습니다.\",\r\n        category: '무기',\r\n        type: 'execute',\r\n        feature: 'attack',\r\n        targetCount: 1\r\n    },\r\n    // {\r\n    //     name: '라이터',\r\n    //     description: \"연료카드도 같이 사용해서 좀비를 4구를 제거합니다. 위험 노출 주사를 굴리지 않습니다.\",\r\n    //     category: '무기',\r\n    //     type: 'execute',\r\n    //     feature: 'attackWithFuel'\r\n    // },\r\n    {\r\n        name: '야시경',\r\n        description: \"좀비를 1구를 제거합니다. 위험 노출 주사를 굴리지 않습니다.\",\r\n        category: '도구',\r\n        type: 'execute',\r\n        feature: 'attack',\r\n        targetCount: 1\r\n    },\r\n    {\r\n        name: '자물쇠',\r\n        description: \"바리게이트를 설치합니다.\",\r\n        category: '도구',\r\n        type: 'execute',\r\n        feature: 'barricade'\r\n    },\r\n    {\r\n        name: '망치',\r\n        description: \"바리게이트를 설치합니다.\",\r\n        category: '도구',\r\n        type: 'execute',\r\n        feature: 'barricade'\r\n    },\r\n    {\r\n        name: '대걸레',\r\n        description: \"쓰레기 3개를 치웁니다.\",\r\n        category: '도구',\r\n        type: 'execute',\r\n        feature: 'clean'\r\n    }\r\n    // ,\r\n    // {\r\n    //     name: '손전등',\r\n    //     description: \"아무 장소의 아이템 카드 3장을 획득합니다.\",\r\n    //     category: '도구',\r\n    //     type: 'execute',\r\n    //     feature: 'search',\r\n    //     placeNameList: ['학교', '병원', '경찰서', '마트', '도서관', '주유소']\r\n    // }\r\n];\r\n\r\nitemCardList.forEach(itemCard => {\r\n    itemCard.canPreventRisk = false;\r\n    itemCard.canExecute = false;\r\n});\r\n\r\nexport default itemCardList;\r\n","const survivorList = [\r\n    {\r\n        index: 0,\r\n        name: '브라이언 리',\r\n        job: '시장',\r\n        power: 68,\r\n        attack: 3,\r\n        search: 4,\r\n        ability: {\r\n            name: '도서관에 있을때 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['도서관']\r\n        }\r\n    },\r\n    {\r\n        index: 1,\r\n        name: '토머스 하트',\r\n        job: '군인',\r\n        power: 64,\r\n        attack: 1,\r\n        search: 3,\r\n        ability: {\r\n            name: '현재 장소에서 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['피난기지', '병원', '경찰서', '주유소', '학교', '도서관', '마트']\r\n        }\r\n    },\r\n    {\r\n        index: 2,\r\n        name: '스파키',\r\n        job: '스턴트견',\r\n        power: 10,\r\n        attack: 2,\r\n        search: 2,\r\n        ability: {\r\n            name: '이동하지만 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'move'\r\n        }\r\n    },\r\n    {\r\n        index: 3,\r\n        name: '올리비아 브라운',\r\n        job: '의사',\r\n        power: 56,\r\n        attack: 4,\r\n        search: 3,\r\n        ability: {\r\n            name: '올리바아와 같은 장소의 생존자(올리비아 포함) 중 한 명에게서 부상 토근 1개 제거합니다.',\r\n            type: 'care',\r\n        }\r\n    },\r\n    {\r\n        index: 4,\r\n        name: '그레이 비어드',\r\n        job: '해적',\r\n        power: 16,\r\n        attack: 1,\r\n        search: 4,\r\n        ability: {\r\n            name: '현재 장소의 아이템 카드 1장 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['피난기지', '병원', '경찰서', '주유소', '학교', '도서관', '마트']\r\n        }\r\n    },\r\n    {\r\n        index: 5,\r\n        name: '로레타 클레이',\r\n        job: '요리사',\r\n        power: 20,\r\n        attack: 2,\r\n        search: 4,\r\n        ability: {\r\n            name: '식량 창고에 식량 토큰 2개 추가합니다.',\r\n            type: 'food'\r\n        }\r\n    },\r\n    {\r\n        index: 6,\r\n        name: '앤드류 에반스',\r\n        job: '농부',\r\n        power: 12,\r\n        attack: 3,\r\n        search: 3,\r\n        ability: {\r\n            name: '마트에 있을때, 아이템 카드 1장 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['마트']\r\n        }\r\n    },\r\n    {\r\n        index: 7,\r\n        name: '탈리아 존스',\r\n        job: '점술가',\r\n        power: 28,\r\n        attack: 3,\r\n        search: 1,\r\n        ability: {\r\n            name: '도서관에 있을때, 아이템 카드 1장 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['도서관']\r\n        }\r\n    },\r\n    {\r\n        index: 8,\r\n        name: '포레스트 플럼',\r\n        job: '쇼핑몰 직원',\r\n        power: 14,\r\n        attack: 2,\r\n        search: 5,\r\n        ability: {\r\n            name: '포레스트를 게임에서 제거함으로 사기 1 상승 합니다.',\r\n            type: 'plusMoral'\r\n        }\r\n    },\r\n    {\r\n        index: 9,\r\n        name: '데이비드 가르시아',\r\n        job: '회계사',\r\n        power: 50,\r\n        attack: 4,\r\n        search: 3,\r\n        ability: {\r\n            name: '현재 장소에서 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['피난기지', '병원', '경찰서', '주유소', '학교', '도서관', '마트']\r\n        }\r\n    },\r\n    {\r\n        index: 10,\r\n        name: '존 프라이스',\r\n        job: '학생',\r\n        power: 18,\r\n        attack: 3,\r\n        search: 5,\r\n        ability: {\r\n            name: '학교에 있을때, 아이템 카드 1장 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['학교']\r\n        }\r\n    },\r\n    {\r\n        index: 11,\r\n        name: '에드워드 화이트',\r\n        job: '화학자',\r\n        power: 44,\r\n        attack: 4,\r\n        search: 3,\r\n        ability: {\r\n            name: '주유소에 있을때 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['주유소']\r\n        }\r\n    },\r\n    {\r\n        index: 12,\r\n        name: '알렉시스 그레이',\r\n        job: '사서',\r\n        power: 46,\r\n        attack: 5,\r\n        search: 4,\r\n        ability: {\r\n            name: '도서관에 있을때 아이템 카드 1장을 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['도서관']\r\n        }\r\n    },\r\n    {\r\n        index: 13,\r\n        name: '마리아 로페즈',\r\n        job: '교사',\r\n        power: 48,\r\n        attack: 4,\r\n        search: 2,\r\n        ability: {\r\n            name: '학교에 있을때 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['학교']\r\n        }\r\n    },\r\n    {\r\n        index: 14,\r\n        name: '소피 로빈슨',\r\n        job: '항공기 조종사',\r\n        power: 58,\r\n        attack: 4,\r\n        search: 1,\r\n        ability: {\r\n            name: '경찰서에 있을때 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['경찰서']\r\n        }\r\n    },\r\n    {\r\n        index: 15,\r\n        name: '가브리엘 디아즈',\r\n        job: '소방관',\r\n        power: 60,\r\n        attack: 2,\r\n        search: 3,\r\n        ability: {\r\n            name: '현재 장소에선 외부인 카드 1장를 가져갑니다.',\r\n            type: 'rescue'\r\n        }\r\n    },\r\n    {\r\n        index: 16,\r\n        name: '제니 클라크',\r\n        job: '웨이트리스',\r\n        power: 24,\r\n        attack: 4,\r\n        search: 3,\r\n        ability: {\r\n            name: '현재 장소의 아이템 카드를 1장을 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['피난기지', '병원', '경찰서', '주유소', '학교', '도서관', '마트']\r\n        }\r\n    },\r\n    {\r\n        index: 17,\r\n        name: '브랜든 케인',\r\n        job: '건물 관리인',\r\n        power: 26,\r\n        attack: 2,\r\n        search: 4,\r\n        ability: {\r\n            name: '쓰레기 카드 5장 처분합니다.',\r\n            type: 'clean'\r\n        }\r\n    },\r\n    {\r\n        index: 18,\r\n        name: '베브 러셀',\r\n        job: '어머니',\r\n        power: 34,\r\n        attack: 2,\r\n        search: 4,\r\n        ability: {\r\n            name: '피난기지에 있을때 좀비 1구 처치합니다. 이때 위험 노출 주사위 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['피난기지']\r\n        }\r\n    },\r\n    {\r\n        index: 19,\r\n        name: '버디 데이비스',\r\n        job: '헬스 트레이너',\r\n        power: 36,\r\n        attack: 2,\r\n        search: 4,\r\n        ability: {\r\n            name: '마트에 있을때 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['마트']\r\n        }\r\n    },\r\n    {\r\n        index: 20,\r\n        name: '애널리 첸',\r\n        job: '변호사',\r\n        power: 38,\r\n        attack: 2,\r\n        search: 2,\r\n        ability: {\r\n            name: '현재 장소의 아이템 카드를 1장을 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['피난기지', '병원', '경찰서', '주유소', '학교', '도서관', '마트']\r\n        }\r\n    },\r\n    {\r\n        index: 21,\r\n        name: '로드 밀러',\r\n        job: '트럭 운전기사',\r\n        power: 40,\r\n        attack: 3,\r\n        search: 3,\r\n        ability: {\r\n            name: '주유소에 있을때 아이템 카드를 1장을 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['주유소']\r\n        }\r\n    },\r\n    {\r\n        index: 22,\r\n        name: '자넷 타일러',\r\n        job: '간호사',\r\n        power: 42,\r\n        attack: 3,\r\n        search: 4,\r\n        ability: {\r\n            name: '병원에 있을때 아이템 카드 1장 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['병원']\r\n        }\r\n    },\r\n    {\r\n        index: 23,\r\n        name: '아서 서스턴',\r\n        job: '교장',\r\n        power: 62,\r\n        attack: 4,\r\n        search: 2,\r\n        ability: {\r\n            name: '학교에 있을때 아이템 카드 1장 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['학교']\r\n        }\r\n    },\r\n    {\r\n        index: 24,\r\n        name: '마이크 조',\r\n        job: '닌자',\r\n        power: 30,\r\n        attack: 2,\r\n        search: 4,\r\n        ability: {\r\n            name: '현재 장소에서 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['피난기지', '병원', '경찰서', '주유소', '학교', '도서관', '마트']\r\n        }\r\n    },\r\n    {\r\n        index: 25,\r\n        name: '하먼 브록스',\r\n        job: '공원 관리인',\r\n        power: 32,\r\n        attack: 3,\r\n        search: 3,\r\n        ability: {\r\n            name: '현재 장소에 바리케이트 2개 설치합니다.',\r\n            type: 'barricade',\r\n            placeNameList: ['피난기지', '병원', '경찰서', '주유소', '학교', '도서관', '마트']\r\n        }\r\n    },\r\n    {\r\n        index: 26,\r\n        name: '제임스 마이어스',\r\n        job: '정신과 의사',\r\n        power: 54,\r\n        attack: 6,\r\n        search: 3,\r\n        ability: {\r\n            name: '병원에 있을때 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['병원']\r\n        }\r\n    },\r\n    {\r\n        index: 27,\r\n        name: '카를라 톰슨',\r\n        job: '경찰 지령요원',\r\n        power: 22,\r\n        attack: 4,\r\n        search: 3,\r\n        ability: {\r\n            name: '경찰서에 있을때 아이템 카드 1장 가져갑니다.',\r\n            type: 'get',\r\n            placeNameList: ['경찰서']\r\n        }\r\n    },\r\n    {\r\n        index: 28,\r\n        name: '에슐리 로스',\r\n        job: '건설 노동자',\r\n        power: 52,\r\n        attack: 2,\r\n        search: 5,\r\n        ability: {\r\n            name: '현재 장소에 바리케이트 2개 설치합니다.',\r\n            type: 'barricade',\r\n            placeNameList: ['피난기지', '병원', '경찰서', '주유소', '학교', '도서관', '마트']\r\n        }\r\n    },\r\n    {\r\n        index: 29,\r\n        name: '다니엘 스미스',\r\n        job: '보안관',\r\n        power: 66,\r\n        attack: 2,\r\n        search: 5,\r\n        ability: {\r\n            name: '현재 장소에서 좀비 1구 처치합니다. 이때 위험 노출 주사위를 굴리지 않습니다.',\r\n            type: 'killZombie',\r\n            placeNameList: ['피난기지', '병원', '경찰서', '주유소', '학교', '도서관', '마트']\r\n        }\r\n    }\r\n];\r\n\r\nsurvivorList.forEach(survivor => {\r\n    survivor.wound = 0;\r\n    survivor.playerIndex = 0;\r\n    survivor.active = false;\r\n    survivor.place = null\r\n    survivor.ability.done = false;\r\n    survivor.actionTable = [];\r\n    survivor.foodList = [];\r\n    survivor.noRollDangerDice = false;\r\n    survivor.canUseAbility = true;\r\n    survivor.playerName;\r\n});\r\n\r\nexport default survivorList;","import survivorList from \"./survivorList\";\r\n\r\nconst placeList = [\r\n    {\r\n        name: '피난기지',\r\n        maxSurvivorCount: 24,\r\n        survivorList: [],\r\n        survivorLocationList: [],\r\n        foodCount: 0,\r\n        starvingTokenCount: 0,\r\n        weakTokenCount: 0,\r\n        trashCount: 0,\r\n        itemCardList: [],\r\n        entranceList: [\r\n            {\r\n                maxZombieCount: 3,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            },\r\n            {\r\n                maxZombieCount: 3,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            },\r\n            {\r\n                maxZombieCount: 3,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            },\r\n            {\r\n                maxZombieCount: 3,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            },\r\n            {\r\n                maxZombieCount: 3,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            },\r\n            {\r\n                maxZombieCount: 3,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: '경찰서',\r\n        entranceList: [\r\n            {\r\n                maxZombieCount: 4,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            }\r\n        ],\r\n        maxSurvivorCount: 3,\r\n        survivorList: [],\r\n        survivorLocationList: [],\r\n        noiseTokenCount: 0,\r\n        itemCardList: [\r\n            \"무전기\",\r\n            \"잡동사니\",\r\n            \"야시경\",\r\n            \"자물쇠\",\r\n            \"산탄총\",\r\n            \"권총\",\r\n            \"권총\",\r\n            \"권총\",\r\n            \"소총\",\r\n            \"소총\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"외부인1\",\r\n            \"외부인2\",\r\n            \"외부인2\",\r\n        ]\r\n    },\r\n    {\r\n        name: '병원',\r\n        entranceList: [\r\n            {\r\n                maxZombieCount: 4,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            }\r\n        ],\r\n        maxSurvivorCount: 4,\r\n        survivorList: [],\r\n        survivorLocationList: [],\r\n        noiseTokenCount: 0,\r\n        itemCardList: [\r\n            \"잡동사니\",\r\n            \"대걸레\",\r\n            \"약\",\r\n            \"약\",\r\n            \"약\",\r\n            \"약\",\r\n            \"약\",\r\n            \"주사기\",\r\n            \"주사기\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"식량2\",\r\n            \"식량2\",\r\n            \"식량2\",\r\n            \"식량2\",\r\n            \"외부인2\",\r\n            \"외부인2\",\r\n            \"외부인2\",\r\n        ]\r\n    },\r\n    {\r\n        name: '학교',\r\n        entranceList: [\r\n            {\r\n                maxZombieCount: 4,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            }\r\n        ],\r\n        maxSurvivorCount: 4,\r\n        survivorList: [],\r\n        survivorLocationList: [],\r\n        noiseTokenCount: 0,\r\n        itemCardList: [\r\n            \"잡동사니\",\r\n            \"야구방망이\",\r\n            \"가위\",\r\n            \"확성기\",\r\n            \"약\",\r\n            \"약\",\r\n            \"약\",\r\n            \"학교 청사진\",\r\n            \"바리게이트\",\r\n            \"리더십\",\r\n            \"격투기\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"식량2\",\r\n            \"식량2\",\r\n            \"식량2\",\r\n            \"외부인2\",\r\n            \"외부인2\",\r\n            \"외부인3\"\r\n        ]\r\n    },\r\n    {\r\n        name: '마트',\r\n        maxSurvivorCount: 3,\r\n        entranceList: [\r\n            {\r\n                maxZombieCount: 4,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            }\r\n        ],\r\n        survivorList: [],\r\n        survivorLocationList: [],\r\n        noiseTokenCount: 0,\r\n        itemCardList: [\r\n            \"잡동사니\",\r\n            \"잡동사니\",\r\n            \"주머니칼\",\r\n            \"망치\",\r\n            \"연료\",\r\n            \"약\",\r\n            \"약\",\r\n            \"약\",\r\n            \"약\",\r\n            \"약\",\r\n            \"약\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"식량2\",\r\n            \"식량2\",\r\n            \"식량3\",\r\n            \"식량3\",\r\n            \"외부인1\",\r\n            \"외부인2\",\r\n            \"외부인2\",\r\n        ]\r\n    },\r\n    {\r\n        name: '도서관',\r\n        entranceList: [\r\n            {\r\n                maxZombieCount: 3,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            }\r\n        ],\r\n        maxSurvivorCount: 3,\r\n        survivorList: [],\r\n        survivorLocationList: [],\r\n        barricadeCount: 0,\r\n        noiseTokenCount: 0,\r\n        itemCardList: [\r\n            \"독서등\",\r\n            \"잡동사니\",\r\n            \"백과사전\",\r\n            \"생존 요리법\",\r\n            \"경찰서 청사진\",\r\n            \"병원 청사진\",\r\n            \"마트 청사진\",\r\n            \"주유소 청사진\",\r\n            \"도서관 청사진\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"외부인1\",\r\n            \"외부인2\",\r\n            \"외부인2\",\r\n        ]\r\n    },\r\n    {\r\n        name: '주유소',\r\n        entranceList: [\r\n            {\r\n                maxZombieCount: 3,\r\n                zombieCount: 0,\r\n                barricadeCount: 0\r\n            }\r\n        ],\r\n        maxSurvivorCount: 2,\r\n        survivorList: [],\r\n        survivorLocationList: [],\r\n        noiseTokenCount: 0,\r\n        itemCardList: [\r\n            \"산탄총\",\r\n            \"주머니칼\",\r\n            \"주머니칼\",\r\n            \"바리게이트\",\r\n            \"잡동사니\",\r\n            \"약\",\r\n            \"약\",\r\n            \"약\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"연료\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"식량1\",\r\n            \"외부인1\",\r\n            \"외부인2\",\r\n            \"외부인2\",\r\n        ]\r\n    }\r\n];\r\n\r\nsurvivorList.forEach(survivor => {\r\n    survivor.activieSurvive = null;\r\n});\r\n\r\nplaceList.forEach((place, index) => {\r\n    place.index = index;\r\n    place.currentZombieCount = 0;\r\n    place.currentBarricadeCount = 0;\r\n    place.maxZombieCount = 0;\r\n    place.currentZombieList = [];\r\n\r\n    place.entranceList.forEach(entrance => {\r\n        entrance.zombieList = [];\r\n    });\r\n\r\n    if (index === 0) {\r\n        place.activeClassName = 'active';\r\n    } else {\r\n        place.activeClassName = 'inactive';\r\n    }\r\n});\r\n\r\nexport default placeList;","const riskCardList = [\r\n    {\r\n        name: '식량 2개를 모아라. 실패시 사기 1 하락',\r\n        condition: {\r\n            itemCardList: ['식량'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'minusMoral'\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '연료 2개를 모아라. 실패시 피난기지에 좀비 12구 출현',\r\n        condition: {\r\n            itemCardList: ['연료'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'zombie',\r\n                        targetCount: 12,\r\n                        placeList: ['피난기지']\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '약 2개를 모아라. 실패시 5번의 부상',\r\n        condition: {\r\n            itemCardList: ['약'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'wound',\r\n                        targetCount: 5\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '약/도구 2개를 모아라. 실패시 도서관과 마트에 좀비 3구 출현',\r\n        condition: {\r\n            itemCardList: ['약', '도구'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'zombie',\r\n                        placeList: ['도서관', '마트'],\r\n                        targetCount: 3\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '약/도구 2개를 모아라. 실패시 바리케이드 모두 제거, 1번의 부상',\r\n        condition: {\r\n            itemCardList: ['약', '도구'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'barricade',\r\n                        targetCount: 100\r\n                    },\r\n                    {\r\n                        name: 'wound',\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '연료 2개를 모아라. 실패시 사기 2 저하, 1번의 부상',\r\n        condition: {\r\n            itemCardList: ['연료'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 2\r\n                    },\r\n                    {\r\n                        name: 'wound',\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '식량 2개를 모아라. 실패시 굶주림 토큰 1개, 사기 1 저하',\r\n        condition: {\r\n            itemCardList: ['식량'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'starving',\r\n                        targetCount: 1\r\n                    },\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '식량 2개를 모아라. 실패시 굶주림 토큰 1개, 사기 1 저하',\r\n        condition: {\r\n            itemCardList: ['식량'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'starving',\r\n                        targetCount: 1\r\n                    },\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '도구 2개를 모아라. 실패시 피난기지에 좀비 6구 촐몰, 다른 모든 장소에는 좀비 1구 출몰',\r\n        condition: {\r\n            itemCardList: ['도구'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'zombie',\r\n                        placeList: ['피난기지'],\r\n                        targetCount: 6\r\n                    },\r\n                    {\r\n                        name: 'zombie',\r\n                        placeList: ['병원', '마트', '경찰서', '주유소', '도서관', '학교'],\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '약 2개를 모아라. 실패시 모든 생존자 1번의 부상, 사기 1 저하',\r\n        condition: {\r\n            itemCardList: ['약'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'wound',\r\n                        targetCount: 100\r\n                    },\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '식량 2개를 모아라. 실패시 사기 2 저하',\r\n        condition: {\r\n            itemCardList: ['식량'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 2\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '식량/약 2개를 모아라. 실패시 병원, 주유소에 좀비 3구 출몰',\r\n        condition: {\r\n            itemCardList: ['식량', '약'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'zombie',\r\n                        placeList: ['병원', '주유소'],\r\n                        targetCount: 3\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '연료 2개를 모아라. 실패시 모든 바리케이트 제거',\r\n        condition: {\r\n            itemCardList: ['연료'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'barricade',\r\n                        targetCount: 100\r\n                    },\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '연료 2개를 모아라. 실패시 바리케이트 제거, 1번의 부상, 사기 1 저하',\r\n        condition: {\r\n            itemCardList: ['연료'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'barricade'\r\n                    },\r\n                    {\r\n                        name: 'wound',\r\n                        targetCount: 1\r\n                    },\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '도구 2개를 모아라. 실패시 피난기지에 좀비 8구 출몰, 사기 1 저하',\r\n        condition: {\r\n            itemCardList: ['도구'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'zombie',\r\n                        placeList: ['피난기지'],\r\n                        targetCount: 8\r\n                    },\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '약 2개를 모아라. 실패시 사기 2 저하',\r\n        condition: {\r\n            itemCardList: ['약'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 2\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '식량 2개를 모아라. 실패시 생존자 2명 죽음, 사기는 저하되지 않습니다.',\r\n        condition: {\r\n            itemCardList: ['식량'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'dead',\r\n                        targetCount: 2\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '식량 2개를 모아라. 실패시 생존자 1명 죽음, 사기 1 저하',\r\n        condition: {\r\n            itemCardList: ['식량'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'dead',\r\n                        targetCount: 1\r\n                    },\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '도구 2개를 모아라. 실패시 피난기지의 식량 3개 제거, 사기 1 저하',\r\n        condition: {\r\n            itemCardList: ['도구'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: '식량제거',\r\n                        targetCount: 3\r\n                    },\r\n                    {\r\n                        name: 'minusMoral',\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: '도구/연료 2개를 모아라. 실패시 학교, 경찰서에 각각 좀비 1구 출몰',\r\n        condition: {\r\n            itemCardList: ['도구', '연료'],\r\n            fail: {\r\n                actionList: [\r\n                    {\r\n                        name: 'zombie',\r\n                        placeList: ['학교', '경찰서'],\r\n                        targetCount: 1\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n];\r\n\r\nexport default riskCardList;","import itemCardList from './itemCardList';\r\nimport placeList from \"./placeList\";\r\nimport survivorList from \"./survivorList\";\r\nimport riskCardList from \"./riskCardList\";\r\n\r\nconst game = {\r\n    fail: false,\r\n    itemCardAnimationType: 'risk',\r\n    modalClass: '',\r\n    modalType: '',\r\n    actionType: '',\r\n    currentActionIndex: -1,\r\n    goal: '좀비 40구를 잡아라',\r\n    messageList: [],\r\n    zombieIndex: 0,\r\n    entranceZombieIndex: 0,\r\n    campFoodIndex: 0,\r\n    campTrashIndex: 0,\r\n    selectedItemCardFeature: null,\r\n    selectedActionIndex: 0,\r\n    actionTable: [],\r\n    currentPlace: null,\r\n    currentPlaceName: '피난기지',\r\n    currentRiskCard: null,\r\n    riskCard: true,\r\n    dangerDice: false,\r\n    currentSurvivor: null,\r\n    successRiskCardList: [],\r\n    currentPlayer: null,\r\n    canTurn: false,\r\n    canAction: false,\r\n    rollDice: false,\r\n    turn: 0,\r\n    round: 6,\r\n    moral: 6,\r\n    survivorCount: 0,\r\n    deadSurvivorCount: 0,\r\n    deadSurvivorList: [],\r\n    zombieCount: 0,\r\n    zombieTokenCount: 0,\r\n    deadZombieCount: 0,\r\n    deadZombieList: [],\r\n    itemCardCount: 0,\r\n    riskCardList: riskCardList,\r\n    itemCardList: itemCardList,\r\n    initItemCardList: [\r\n        '식량1', '식량1', \"식량1\", \"식량1\", \"식량1\",\r\n        \"식량1\", \"식량1\", \"식량1\", \"식량1\", \"식량1\",\r\n        '약',  '약', '약', '약', '약',\r\n        \"잡동사니\", \"잡동사니\", \"잡동사니\", \"잡동사니\", \"잡동사니\",\r\n        \"연료\", \"연료\", \"연료\",\"연료\",\"연료\"\r\n    ],\r\n    placeList: placeList,\r\n    survivorList: survivorList,\r\n    playerList: [\r\n        {\r\n            index: 0,\r\n            name: '테드',\r\n            color: '#e3befa',\r\n            survivorList: [],\r\n            itemCardList:[],\r\n            actionDiceList: [],\r\n            actionTable: []\r\n        },\r\n        {\r\n            index: 1,\r\n            name: '다은',\r\n            color: '#FCF3CF  ',\r\n            survivorList: [],\r\n            itemCardList:[],\r\n            actionDiceList: [],\r\n            actionTable: []\r\n        }\r\n    ]\r\n}\r\n\r\nconst groupByType = game.survivorList\r\n    .reduce((group, survivor) => {\r\n        const { ability } = survivor;\r\n\r\n        const key = `${ability.type}-${ability.place}`;\r\n        group[key] = group[key] ?? 0;\r\n        group[key]++;\r\n\r\n        return group;\r\n    }, {});\r\n\r\ngame.survivorList.forEach(survivor => {\r\n    return survivor.woundedCount = 0;\r\n});\r\n\r\nexport default game;","import {get, writable} from \"svelte/store\";\r\nimport game from \"./game\"\r\n\r\nconst { subscribe, set, update } = writable(game);\r\n\r\nlet updateAll = () => {};\r\nlet g = game;\r\n\r\nconst u2 = (callback) => {\r\n    update(game => {\r\n        g = game;\r\n        callback(game);\r\n        return game;\r\n    });\r\n};\r\n\r\nconst u = (callback) => {\r\n    u2(callback);\r\n    updateAll();\r\n};\r\n\r\n\r\nlet gameStore = {\r\n    subscribe,\r\n    set,\r\n    update\r\n};\r\n\r\ngameStore = {\r\n    ...gameStore,\r\n\r\n    minusRound: () => u(game => {\r\n        g.round -= 1;\r\n    }),\r\n\r\n    plusMoral: () => u(game => {\r\n        g.moral += 1\r\n    }),\r\n\r\n    minusMoral: () => u(game => {\r\n        if (g.moral > 0) {\r\n            g.moral--;\r\n        }\r\n    }),\r\n\r\n    initRiskCard: () => {\r\n        g.riskCardList = g.riskCardList\r\n            .sort(gameStore.random);\r\n    },\r\n\r\n    initItemCard: () => {\r\n        g.playerList.forEach(player => {\r\n            player.itemCardList = game.initItemCardList\r\n                .sort(gameStore.random)\r\n                .slice(0, 7)\r\n                .map(name => gameStore.createNewItemCard(name));\r\n        });\r\n\r\n        g.placeList.forEach(place => {\r\n            place.itemCardList = place.itemCardList\r\n                .sort(gameStore.random)\r\n                .map(name => gameStore.createNewItemCard(name));\r\n        });\r\n    },\r\n\r\n    createNewItemCard: (name) => {\r\n        let itemCard = g.itemCardList.find(item => item.name === name);\r\n\r\n        return {\r\n            ...itemCard\r\n        };\r\n    },\r\n\r\n    getPlayerColorForSurvivor: (survivor) => {\r\n        return g.playerList\r\n            .find(player => player.index === survivor.playerIndex)\r\n            .color;\r\n    },\r\n\r\n    initSurvivor: (game) => {\r\n        g.playerList.forEach((player, playerIndex) => {\r\n            g.survivorList\r\n                .sort(gameStore.random);\r\n\r\n            const survivorList = [];\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                const survivor = g.survivorList.pop();\r\n                survivor.playerIndex = playerIndex;\r\n                survivorList.push(survivor);\r\n            }\r\n\r\n            survivorList.sort((a, b) => a.index - b.index);\r\n\r\n            player.survivorList = survivorList;\r\n\r\n            g.survivorList = [...g.survivorList];\r\n        });\r\n    },\r\n\r\n    updatePlace: () => {\r\n        g.placeList.forEach(place => {\r\n            if (place.name === '피난기지') {\r\n                place.trashCount = place.trashList.length;\r\n            }\r\n\r\n            place.survivorList.sort((a, b) => a.playerIndex - b.playerIndex);\r\n\r\n            const initPlayerSurvivorMap = {}\r\n\r\n            g.playerList.forEach(player => {\r\n                initPlayerSurvivorMap[player.name] = [];\r\n            });\r\n\r\n            place.playerSurvivorMap = place.survivorList.reduce((group, survivor) => {\r\n                const playerName = g.playerList[survivor.playerIndex].name;\r\n                group[playerName] = group[playerName] ?? [];\r\n                group[playerName].push(survivor);\r\n                return group;\r\n            }, initPlayerSurvivorMap);\r\n\r\n            const currentSurvivorList = [...place.survivorList];\r\n\r\n            if (place.name === g.currentPlaceName) {\r\n                place.activeClassName = 'active';\r\n            } else {\r\n                place.activeClassName = 'inactive';\r\n            }\r\n\r\n            place.currentZombieCount = place.entranceList\r\n                .map(entrance => entrance.zombieCount)\r\n                .reduce((a, b) => a + b, 0);\r\n\r\n            place.currentZombieList = [];\r\n\r\n            for (let i = 0; i < place.currentZombieCount; i++) {\r\n                place.currentZombieList.push(game.zombieIndex++);\r\n            }\r\n\r\n            place.maxZombieCount = place.entranceList\r\n                .map(entrance => entrance.maxZombieCount)\r\n                .reduce((a, b) => a + b, 0);\r\n\r\n            place.currentBarricadeCount = place.entranceList\r\n                .map(entrance => entrance.barricadeCount)\r\n                .reduce((a, b) => a + b, 0);\r\n\r\n            place.survivorLocationList = [...Array(place.maxSurvivorCount).keys()]\r\n                .map(index => {\r\n                    if (place.survivorList.length > index) {\r\n                        return place.survivorList[index];\r\n                    }\r\n\r\n                    return null;\r\n                });\r\n        });\r\n    },\r\n\r\n    getCamp: () => {\r\n        return g.placeList.find(place => place.name === '피난기지');\r\n    },\r\n\r\n    getSurvivorList: () => {\r\n        return g.playerList.flatMap(player => player.survivorList);\r\n    },\r\n\r\n    getCurrentPlayer: () => {\r\n        const playerList = g.playerList;\r\n        return playerList[g.turn % 2];\r\n    },\r\n\r\n    getCurrentPlayerColor: () => {\r\n        return gameStore.getCurrentPlayer().color;\r\n    },\r\n\r\n    getPlayerColor: (index) => {\r\n        return g.playerList[index].color;\r\n    },\r\n\r\n    initCamp: () => {\r\n        const survivorList = gameStore.getSurvivorList();\r\n        const camp = gameStore.getCamp();\r\n\r\n        camp.survivorList = survivorList;\r\n        camp.survivorList.forEach(survivor => survivor.place = camp);\r\n\r\n        camp.foodList = [...Array(camp.foodCount).keys()]\r\n            .map(index => g.campFoodIndex++);\r\n\r\n        camp.trashList = [];\r\n    },\r\n\r\n    care: (woundSurvivor) => {\r\n        u(game => {\r\n            g.currentSurvivor.canUseAbility = false;\r\n\r\n            if (g.currentActionIndex >= 0) {\r\n                g.currentPlayer.actionDiceList[g.currentActionIndex].done = true;\r\n            }\r\n\r\n            woundSurvivor.wound--;\r\n            g.modalClass = '';\r\n            g.modalType = '';\r\n        });\r\n\r\n        alert(`${woundSurvivor.name} 부상토큰 하나가 제거되었습니다.`);\r\n    },\r\n\r\n    move: (currentSurvivor, placeName) => {\r\n        u(game => {\r\n            g.modalClass = '';\r\n            g.modalType = '';\r\n            g.actionType = 'move';\r\n            g.placeList.forEach(place => {\r\n                if (place.name === placeName) {\r\n                    place.survivorList = [...place.survivorList, currentSurvivor];\r\n                } else {\r\n                    place.survivorList = place.survivorList\r\n                        .filter(survivor => survivor.index !== currentSurvivor.index);\r\n                }\r\n            });\r\n\r\n            g.currentSurvivor = currentSurvivor;\r\n            g.currentSurvivor.place = g.placeList.find(place => place.name === placeName);\r\n\r\n            g.currentPlaceName = placeName;\r\n\r\n            if (g.currentActionIndex >= 0) {\r\n                g.currentPlayer.actionDiceList[g.currentActionIndex].done = true;\r\n            }\r\n        });\r\n    },\r\n\r\n    changePlaceByName: (currentPlaceName) => {\r\n        if (currentPlaceName === null) {\r\n            return;\r\n        }\r\n\r\n        u(game => game.currentPlaceName = currentPlaceName);\r\n    },\r\n\r\n    showMessage: (messageList) => {\r\n        u(game => game.messageList = messageList);\r\n    },\r\n\r\n    processFood: (messageList) => {\r\n        const camp = gameStore.getCamp();\r\n\r\n        if (camp.survivorList.length >= 2) {\r\n            const foodCount = Math.floor(camp.survivorList.length / 2);\r\n\r\n            if (foodCount > camp.foodCount) {\r\n                let starvingTokenCount = 0;\r\n                let oldMoral = 0;\r\n\r\n                u(game => {\r\n                    oldMoral = g.moral;\r\n                    camp.starvingTokenCount++;\r\n                    starvingTokenCount = camp.starvingTokenCount;\r\n                });\r\n\r\n                messageList.push(`식량이 부족하여 굶주림 토큰이 추가되었습니다.`);\r\n\r\n                if (starvingTokenCount > 0) {\r\n                    for (let i = 0; i < starvingTokenCount; i++) {\r\n                        gameStore.minusMoral();\r\n                    }\r\n\r\n                    let newMoral = 0;\r\n\r\n                    u(game => {\r\n                        newMoral = g.moral;\r\n                    });\r\n\r\n                    messageList.push(`굶주림 토큰이 ${starvingTokenCount}개가 있어서 사기가 ${oldMoral}에서 ${newMoral}로 하락 하였습니다.`);\r\n                }\r\n            } else {\r\n                for (let i = 0; i < foodCount; i++) {\r\n                    u(game => {\r\n                        const camp = gameStore.getCamp();\r\n                        gameStore.removeFood(camp);\r\n                    });\r\n                }\r\n\r\n                messageList.push(`식량을 ${foodCount}개 소모합니다.`);\r\n            }\r\n\r\n            gameStore.showMessage(messageList);\r\n        }\r\n    },\r\n\r\n    processTrash: (messageList) => {\r\n        const camp = gameStore.getCamp();\r\n\r\n        if (camp.trashList.length < 10) {\r\n            return;\r\n        }\r\n\r\n        const minusMoral = Math.floor(camp.trashList.length / 10);\r\n        messageList.push(`쓰레기가 ${camp.trashList.length}에서 ${camp.trashList.length - (minusMoral * 10)}로 줄어들었으며 사기는 ${minusMoral} 하락합니다.`);\r\n        gameStore.showMessage(messageList);\r\n\r\n        u(game => {\r\n            for (let i = 0; i < minusMoral; i++) {\r\n                gameStore.minusMoral(g);\r\n            }\r\n\r\n            const currentCamp = gameStore.getCamp();\r\n\r\n            for (let i = 0; i < minusMoral * 10; i++) {\r\n                currentCamp.trashList.pop();\r\n            }\r\n        });\r\n    },\r\n\r\n    processRisk: (messageList) => {\r\n        if (g.successRiskCardList.length < 2) {\r\n            messageList.push('위기상황을 해결하지 못하였습니다.');\r\n            gameStore.showMessage(messageList);\r\n\r\n            g.currentRiskCard.condition.fail.actionList.forEach(action => {\r\n                if (action.name === 'minusMoral') {\r\n                    for (let i = 0; i < action.targetCount; i++) {\r\n                        gameStore.minusMoral();\r\n                    }\r\n\r\n                    messageList.push(`사기 ${action.targetCount} 하락합니다.`);\r\n                    gameStore.showMessage(messageList);\r\n                } else if (action.name === 'zombie') {\r\n                    action.placeList\r\n                        .map(placeName => g.placeList\r\n                            .find(place => place.name === placeName))\r\n                        .forEach(place => {\r\n                            gameStore.inviteZombie(place, undefined, action.targetCount);\r\n                            messageList.push(`좀비가 ${place.name}에 ${action.targetCount}구 출몰하였습니다.`);\r\n                            gameStore.showMessage(messageList);\r\n                        });\r\n                } else if (action.name === 'wound') {\r\n                    const survivorList = g.playerList\r\n                        .flatMap(player => player.survivorList)\r\n                        .sort(gameStore.random);\r\n\r\n                    for (let i = 0; i < action.targetCount; i++) {\r\n                        const survivor = survivorList.pop();\r\n\r\n                        if (survivor) {\r\n                            u(game => {\r\n                                g.currentSurvivor = survivor;\r\n                            });\r\n\r\n                            gameStore.wound(messageList);\r\n                        }\r\n                    }\r\n                } else if (action.name === 'barricade') {\r\n                    gameStore.removeAllBarricade(messageList);\r\n                } else if (action.name === 'dead') {\r\n                    const survivorList = g.playerList\r\n                        .flatMap(player => player.survivorList)\r\n                        .sort(gameStore.random);\r\n\r\n                    for (let i = 0; i < action.targetCount; i++) {\r\n                        const survivor = survivorList.pop();\r\n\r\n                        u(game => {\r\n                            g.currentSurvivor = survivor;\r\n                        });\r\n\r\n                        gameStore.dead(false, messageList);\r\n                    }\r\n                } else if (action.name === 'food') {\r\n                    for (let i = 0; i < action.targetCount; i++) {\r\n                        u(game => {\r\n                            const camp = gameStore.getCamp();\r\n                            gameStore.removeFood(camp);\r\n                        });\r\n                    }\r\n\r\n                    messageList.push(`피난기지의 식량 ${action.targetCount}개가 제거되었습니다.`);\r\n                    gameStore.showMessage(messageList);\r\n                }\r\n            });\r\n        } else {\r\n            messageList.push('위기상황을 해결하였습니다.');\r\n            gameStore.showMessage(messageList);\r\n        }\r\n    },\r\n\r\n    turn: () => {\r\n        u(game => {\r\n            g.currentPlayer.actionTable = [];\r\n\r\n            g.survivorList.forEach(survivor => {\r\n                survivor.actionTable = [];\r\n            });\r\n\r\n            g.placeList.forEach(place => {\r\n                place.survivorList.forEach(survivor => {\r\n                    survivor.actionTable = [];\r\n                    survivor.canUseAbility = true;\r\n                });\r\n            });\r\n\r\n            g.playerList.forEach(player => player.actionDiceList = []);\r\n\r\n            g.turn++;\r\n            g.canAction = false;\r\n            g.canTurn = false;\r\n            g.rollDice = true;\r\n        });\r\n\r\n        const turn = g.turn;\r\n\r\n        if (turn > 0 && turn % 2 === 0) {\r\n            const messageList = [];\r\n            gameStore.processFood(messageList);\r\n            gameStore.processTrash(messageList)\r\n            gameStore.processRisk(messageList);\r\n            gameStore.showZombie(messageList)\r\n\r\n            u(game => {\r\n                g.riskCard = true;\r\n                g.rollDice = false;\r\n                g.messageList = messageList;\r\n            });\r\n\r\n            gameStore.minusRound();\r\n        }\r\n    },\r\n\r\n    removeAllBarricade: (messageList) => {\r\n        u(game => {\r\n            g.placeList\r\n                .flatMap(place => place.entranceList)\r\n                .forEach(entrance => {\r\n                    entrance.barricadeCount = 0;\r\n                })\r\n        });\r\n\r\n        messageList.push('바라케이트가 제거되었습니다.');\r\n        gameStore.showMessage(messageList);\r\n    },\r\n\r\n    changePlace: (event) => {\r\n        let currentPlaceName = null;\r\n\r\n        if (event.keyCode === 49 || event.keyCode === 97) {\r\n            currentPlaceName = '피난기지';\r\n        } else if (event.keyCode === 50 || event.keyCode === 98) {\r\n            currentPlaceName = '경찰서';\r\n        } else if (event.keyCode === 51 || event.keyCode === 99) {\r\n            currentPlaceName = '병원';\r\n        } else if (event.keyCode === 52 || event.keyCode === 100) {\r\n            currentPlaceName = '학교';\r\n        } else if (event.keyCode === 53 || event.keyCode === 101) {\r\n            currentPlaceName = '마트';\r\n        } else if (event.keyCode === 54 || event.keyCode === 102) {\r\n            currentPlaceName = '도서관';\r\n        } else if (event.keyCode === 55 || event.keyCode === 103) {\r\n            currentPlaceName = '주유소';\r\n        } else if (event.keyCode === 56) {\r\n            console.log(g);\r\n        }\r\n\r\n        gameStore.changePlaceByName(currentPlaceName);\r\n    },\r\n\r\n    init: () => u(game => {\r\n        gameStore.initRiskCard();\r\n        gameStore.initItemCard();\r\n        gameStore.initSurvivor();\r\n        gameStore.initCamp();\r\n    }),\r\n\r\n    getPlayerSurvivorList: (game, player) => {\r\n        return game.placeList\r\n            .flatMap(place => place.survivorList)\r\n            .filter(survivor => survivor.playerIndex === player.index);\r\n    },\r\n\r\n    updateSurvivor: game => {\r\n        game.playerList.forEach(player => {\r\n            player.survivorList = gameStore.getPlayerSurvivorList(game, player);\r\n\r\n            game.placeList\r\n                .flatMap(place => place.survivorList)\r\n                .forEach(survivor => {\r\n                    survivor.woundList = [...Array(survivor.wound).keys()];\r\n                    survivor.playerName = game.playerList[survivor.playerIndex].name;\r\n                    survivor.noRollDangerDice = false;\r\n                });\r\n        });\r\n\r\n        game.survivorCount = game.playerList\r\n            .map(player => player.survivorList.length)\r\n            .reduce((a, b) => a + b, 0);\r\n\r\n        game.playerList = game.playerList.map(player => {\r\n            player.active = false;\r\n            return player;\r\n        });\r\n    },\r\n\r\n    sum: (a, b) => {\r\n        return a + b;\r\n    },\r\n\r\n    updateZombie: game => {\r\n        game.zombieCount = game.placeList\r\n            .flatMap(player => player.entranceList)\r\n            .map(entrance => entrance.zombieCount)\r\n            .reduce(gameStore.sum);\r\n    },\r\n\r\n    updateItemCard: game => {\r\n        game.itemCardCount = game.playerList\r\n            .map(player => player.itemCardList.length)\r\n            .reduce(gameStore.sum);\r\n\r\n        let itemCardIndex = 0;\r\n\r\n        game.playerList.forEach(player => {\r\n            player.itemCardList.forEach(itemCard => {\r\n                itemCard.index = itemCardIndex++;\r\n            });\r\n\r\n            game.playerList.forEach(player => {\r\n                player.itemCardList.forEach(itemCard => {\r\n                    itemCard.canAction = false;\r\n                    itemCard.canPreventRisk = false;\r\n                })\r\n            });\r\n\r\n            game.currentPlayer.itemCardList.forEach((itemCard) => {\r\n                let placeMatch = true;\r\n\r\n                if (itemCard.placeNameList && itemCard.feature === 'search') {\r\n                    placeMatch = game.currentSurvivor.place.name === itemCard.placeNameList[0];\r\n                }\r\n\r\n                itemCard.canAction = game.canAction === true &&\r\n                    game.selectedItemCardFeature === itemCard.feature &&\r\n                    placeMatch;\r\n            });\r\n\r\n            if (game.currentRiskCard) {\r\n                game.currentPlayer.itemCardList.forEach((itemCard) => {\r\n                    itemCard.canPreventRisk =\r\n                        game.dangerDice === false &&\r\n                        game.selectedItemCardFeature === null &&\r\n                        game.successRiskCardList.length < 2 &&\r\n                        game.canAction &&\r\n                        game.currentRiskCard.condition.itemCardList\r\n                            .filter(name => name === itemCard.category)\r\n                            .length > 0;\r\n                });\r\n            }\r\n        })\r\n    },\r\n\r\n    updateItemCardTable: game => {\r\n        game.playerList.forEach(player => {\r\n            player.itemCardTable = player.itemCardList\r\n                .reduce((previousValue, itemCard) => {\r\n                    const row = previousValue.find(value => value.name === itemCard.name);\r\n\r\n                    if (row) {\r\n                        row.count++;\r\n                    } else {\r\n                        previousValue.push({\r\n                            name: itemCard.name,\r\n                            description: itemCard.description,\r\n                            category: itemCard.category,\r\n                            count: 1\r\n                        });\r\n                    }\r\n\r\n                    return previousValue;\r\n                }, [])\r\n                .sort((a, b) => {\r\n                    if (a.name > b.name) {\r\n                        return 1;\r\n                    }\r\n\r\n                    if (a.name < b.name) {\r\n                        return -1;\r\n                    }\r\n\r\n                    return 0;\r\n                });\r\n        });\r\n    },\r\n\r\n    updateSurvivorCount: () => {\r\n        game.survivorCount = game.placeList\r\n            .map(player => player.survivorList.length)\r\n            .reduce((a, b) => a + b, 0);\r\n\r\n        if (game.survivorCount === 0) {\r\n            alert('생존자가 모두 죽었습니다. 실패하였습니다.');\r\n        }\r\n    },\r\n\r\n    setDisabled: (value) => {\r\n        if (value === true) {\r\n            return '';\r\n        }\r\n\r\n        return 'disabled';\r\n    },\r\n\r\n    updateSurvivorActionTable: (game) => {\r\n        const currentPlayer = gameStore.getCurrentPlayer(game);\r\n        const camp = gameStore.getCamp(game);\r\n\r\n        currentPlayer.survivorList.forEach(survivor => {\r\n            let currentPlace = survivor.place;\r\n\r\n            survivor.actionTable = currentPlayer\r\n                .actionDiceList.map(dice => {\r\n                    const attackItemList = currentPlayer.itemCardList\r\n                        .filter(itemCard => itemCard.feature === 'attack')\r\n                        .filter(itemCard => currentPlace.maxZombieCount > currentPlace.currentZombieCount + currentPlace.currentBarricadeCount)\r\n                        .filter(itemCard => currentPlace.currentZombieCount > 0)\r\n\r\n                    const searchItemList = currentPlayer.itemCardList\r\n                        .filter(itemCard => itemCard.feature === 'search')\r\n                        .filter(itemCard => currentPlace.itemCardList.length > 0)\r\n                        .filter(itemCard => itemCard.placeNameList.filter(placeName => placeName === currentPlace.name).length > 0);\r\n\r\n                    const careItemList =  currentPlayer.itemCardList\r\n                        .filter(itemCard => itemCard.feature === 'care')\r\n                        .filter(itemCard => survivor.wound > 0)\r\n\r\n                    const foodItemList = currentPlayer.itemCardList\r\n                        .filter(itemCard => itemCard.feature === 'food')\r\n\r\n                    const barricadeItemList = currentPlayer.itemCardList\r\n                        .filter(itemCard => itemCard.feature === 'barricade')\r\n                        .filter(itemCard => currentPlace.maxZombieCount > currentPlace.zombieCount + currentPlace.barricadeCount)\r\n\r\n                    return {\r\n                        dice: dice,\r\n                        ability: game.selectedItemCardFeature === null &&\r\n                            !dice.done &&\r\n                            !game.dangerDice &&\r\n                            gameStore.canUseAbility(survivor),\r\n                        food: game.selectedItemCardFeature === null &&\r\n                            !dice.done &&\r\n                            !game.dangerDice &&\r\n                            dice.power < 6 &&\r\n                            gameStore.getCamp(game).foodCount > 0,\r\n                        attack: game.selectedItemCardFeature === null &&\r\n                            !dice.done && !game.dangerDice &&\r\n                            dice.power >= survivor.attack  &&\r\n                            currentPlace.currentZombieCount > 0,\r\n                        search: game.selectedItemCardFeature === null &&\r\n                            dice.power >= survivor.search &&\r\n                            !dice.done &&\r\n                            !game.dangerDice &&\r\n                            currentPlace.itemCardList.length > 0,\r\n                        barricade: game.selectedItemCardFeature === null &&\r\n                            !dice.done &&\r\n                            !game.dangerDice &&\r\n                            currentPlace.maxZombieCount > currentPlace.currentZombieCount + currentPlace.currentBarricadeCount,\r\n                        clean: game.selectedItemCardFeature === null &&\r\n                            !dice.done &&\r\n                            !game.dangerDice &&\r\n                            currentPlace.name === '피난기지' &&\r\n                            currentPlace.trashCount > 0,\r\n                        invite: game.selectedItemCardFeature === null &&\r\n                            !dice.done && !game.dangerDice &&\r\n                            currentPlace.maxZombieCount >= currentPlace.currentZombieCount + currentPlace.currentBarricadeCount + 2,\r\n                        move: game.selectedItemCardFeature === null &&\r\n                            !dice.done &&\r\n                            currentPlayer.itemCardList.filter(itemCard => itemCard.feature === 'safeMove'),\r\n                        itemFood: game.selectedItemCardFeature === null &&\r\n                            !dice.done &&\r\n                            !game.dangerDice &&\r\n                            dice.power < 6 &&\r\n                            currentPlayer.itemCardList.filter(itemCard => itemCard.feature === 'power').length > 0,\r\n                        attackItemList,\r\n                        searchItemList,\r\n                        careItemList,\r\n                        foodItemList,\r\n                        barricadeItemList\r\n                    };\r\n                });\r\n\r\n            const attackItemList = currentPlayer.itemCardList\r\n                .filter(itemCard => itemCard.feature === 'attack')\r\n                .filter(itemCard => currentPlace.currentZombieCount > 0);\r\n\r\n            const searchItemList = currentPlayer.itemCardList\r\n                .filter(itemCard => itemCard.feature === 'search')\r\n                .filter(itemCard => currentPlace.itemCardList.length > 0)\r\n                .filter(itemCard => itemCard.placeNameList.filter(placeName => placeName === currentPlace.name).length > 0);\r\n\r\n            const careItemList =  currentPlayer.itemCardList\r\n                .filter(itemCard => itemCard.feature === 'care')\r\n                .filter(itemCard => survivor.wound > 0)\r\n\r\n            const cleanItemList =  currentPlayer.itemCardList\r\n                .filter(itemCard => itemCard.feature === 'clean')\r\n                .filter(itemCard => camp.trashCount > 0)\r\n\r\n            const foodItemList = currentPlayer.itemCardList\r\n                .filter(itemCard => itemCard.feature === 'food')\r\n\r\n            const barricadeItemList = currentPlayer.itemCardList\r\n                .filter(itemCard => itemCard.feature === 'barricade')\r\n                .filter(itemCard => {\r\n                    return currentPlace.entranceList\r\n                        .filter(entrance => entrance.maxZombieCount > entrance.zombieCount + entrance.barricadeCount)\r\n                        .length > 0\r\n                });\r\n\r\n            survivor.actionItemCard = {\r\n                attack: game.selectedItemCardFeature === null && attackItemList.length > 0,\r\n                search: game.selectedItemCardFeature === null && searchItemList.length > 0,\r\n                care: game.selectedItemCardFeature === null && careItemList.length > 0,\r\n                food: game.selectedItemCardFeature === null && foodItemList.length > 0,\r\n                barricade: game.selectedItemCardFeature === null && barricadeItemList.length > 0,\r\n                clean: game.selectedItemCardFeature === null && cleanItemList.length > 0\r\n            };\r\n\r\n            survivor.actionItemCard.enabled = Object.values(survivor.actionItemCard)\r\n                .filter(item => item).length > 0;\r\n\r\n            survivor.targetPlaceList = game.placeList\r\n                .map(place => {\r\n                    return {\r\n                        ...place,\r\n                        disabled: false\r\n                    }\r\n                })\r\n                .map(targetPlace => {\r\n                    targetPlace.disabled = game.selectedItemCardFeature != null ||\r\n                        game.dangerDice ||\r\n                        currentPlace.name === targetPlace.name ||\r\n                        targetPlace.survivorList.length >= targetPlace.maxSurvivorCount;\r\n\r\n                    return targetPlace;\r\n                })\r\n        });\r\n\r\n        const doneLength = currentPlayer.actionDiceList.filter(dice => dice.done).length;\r\n\r\n        if (doneLength !== 0 &&\r\n            doneLength === currentPlayer.actionDiceList.length &&\r\n            game.dangerDice === false) {\r\n            game.canTurn = true;\r\n        }\r\n\r\n        game.actionTable = [\r\n            {\r\n                name: '공격',\r\n                dice: true,\r\n                count: currentPlayer.survivorList\r\n                    .filter(survivor => survivor.actionTable.filter(action => action.attack).length > 0)\r\n                    .length\r\n            },\r\n            {\r\n                name: '검색',\r\n                dice: true,\r\n                count: currentPlayer.survivorList\r\n                    .filter(survivor => survivor.actionTable.filter(action => action.search).length > 0)\r\n                    .length\r\n            },\r\n            {\r\n                name: '바리게이트',\r\n                dice: true,\r\n                count: currentPlayer.survivorList\r\n                    .filter(survivor => survivor.actionTable.filter(action => action.barricade).length > 0)\r\n                    .length\r\n            },\r\n            {\r\n                name: '청소',\r\n                dice: true,\r\n                count: currentPlayer.survivorList\r\n                    .filter(survivor => survivor.actionTable.filter(action => action.clean).length > 0)\r\n                    .length\r\n            },\r\n            {\r\n                name: '유인',\r\n                dice: true,\r\n                count: currentPlayer.survivorList\r\n                    .filter(survivor => survivor.actionTable.filter(action => action.invite).length > 0)\r\n                    .length\r\n            },\r\n            {\r\n                name: '식사',\r\n                dice: false,\r\n                count: currentPlayer.survivorList\r\n                    .filter(survivor => survivor.actionTable.filter(action => action.food).length > 0)\r\n                    .length\r\n            }\r\n        ];\r\n\r\n        return game;\r\n    },\r\n\r\n    isCurrentPlayerOfSurvivor: (currentSurvivor) => {\r\n        return gameStore.getCurrentPlayer()\r\n            .survivorList\r\n            .filter(survivor => survivor.name === currentSurvivor.name)\r\n            .length > 0;\r\n    },\r\n\r\n    check: () => {\r\n        if (g.fail === true) {\r\n            return false;\r\n        }\r\n\r\n        if (g.moral === 0) {\r\n            alert('사기가 0입니다. 실패하였습니다.');\r\n            return false;\r\n        }\r\n\r\n        if (g.round === 0) {\r\n            alert('라운드가 0입니다. 실패하였습니다.');\r\n            return false;\r\n        }\r\n\r\n        g.playerList.forEach(player => {\r\n            if (gameStore.getPlayerSurvivorList(g, player).length === 0) {\r\n                alert(`${player.name}의 생존자가 모두 죽었습니다. 실패하였습니다.`);\r\n                return false;\r\n            }\r\n        });\r\n\r\n        if (g.deadZombieCount === 40) {\r\n            alert('목표를 완수하였습니다.');\r\n            return false;\r\n        }\r\n\r\n        return true\r\n    },\r\n\r\n    updateAll: () => u2(game => {\r\n        const ok = gameStore.check();\r\n\r\n        if (!ok) {\r\n            g.fail = true;\r\n            return;\r\n        }\r\n\r\n        g.currentPlayer = g.playerList[game.turn % 2];\r\n        gameStore.updateSurvivorCount(g);\r\n        gameStore.updateItemCardTable(g);\r\n        gameStore.updateSurvivor(g);\r\n        gameStore.updateItemCard(g);\r\n        gameStore.updateZombie(g);\r\n        gameStore.updatePlace();\r\n        gameStore.updateSurvivorActionTable(g);\r\n    }),\r\n\r\n    done: (currentSurvivor, actionIndex) => {\r\n        u(game => {\r\n            const currentPlayer = gameStore.getCurrentPlayer();\r\n            currentPlayer.actionDiceList[actionIndex].done = true;\r\n        });\r\n    },\r\n\r\n    plusPower: (currentSurvivor, currentPlace, actionIndex) => {\r\n        u(game => {\r\n            const currentPlayer = gameStore.getCurrentPlayer();\r\n            currentPlayer.actionDiceList[actionIndex].power++;\r\n            const camp = gameStore.getCamp();\r\n            gameStore.removeFood(camp, currentSurvivor);\r\n        });\r\n    },\r\n\r\n    removeFood: (camp, survivor) => {\r\n        const food = camp.foodList.pop();\r\n        camp.foodList = [...camp.foodList];\r\n        camp.foodCount = camp.foodList.length;\r\n\r\n        if (survivor !== undefined) {\r\n            survivor.foodList = [...survivor.foodList, food];\r\n        }\r\n    },\r\n\r\n    addFood: (game, camp, targetCount) => {\r\n        for (let i = 0; i < targetCount; i++) {\r\n            camp.foodList.push(game.campFoodIndex++);\r\n        }\r\n\r\n        camp.foodCount = camp.foodList.length;\r\n    },\r\n\r\n    selectItemCard: (currentPlace, actionIndex) => {\r\n        u(game => {\r\n            g.selectedItemCardFeature = 'power';\r\n            g.selectedActionIndex = actionIndex;\r\n        });\r\n    },\r\n\r\n    selectItemCardWithoutDice: (currentPlace, survivor, feature) => {\r\n        u(game => {\r\n            g.currentPlace = currentPlace;\r\n            g.selectedItemCardFeature = feature;\r\n            g.currentSurvivor = survivor\r\n            g.currentSurvivor.place = currentPlace;\r\n        });\r\n    },\r\n\r\n    preventRisk: (currentItemCard) => {\r\n        u(game => {\r\n            g.itemCardAnimationType = 'risk';\r\n            g.currentPlayer.itemCardList = g.currentPlayer.itemCardList\r\n                .filter(itemCard => itemCard.index !== currentItemCard.index)\r\n\r\n            g.successRiskCardList = [...g.successRiskCardList, currentItemCard];\r\n        });\r\n    },\r\n\r\n    search: (game, survivor, currentPlace, actionIndex) => {\r\n        if (game === null) {\r\n            u(game => {\r\n                gameStore.searchInternal(g, survivor, currentPlace, actionIndex);\r\n            });\r\n        } else {\r\n            gameStore.searchInternal(game, survivor, currentPlace, actionIndex);\r\n        }\r\n    },\r\n\r\n    addSurvivor: (game, itemCard) => {\r\n        alert(`외부인 ${itemCard.targetCount}명을 피난기지에 합류합니다.`);\r\n\r\n        for (let i = 0; i < itemCard.targetCount; i++) {\r\n            const newSurvivor = game.survivorList.pop();\r\n            newSurvivor.playerIndex = game.currentPlayer.index;\r\n            newSurvivor.place = gameStore.getCamp(game);\r\n\r\n            game.placeList\r\n                .find(place => place.name === '피난기지')\r\n                .survivorList\r\n                .push(newSurvivor);\r\n        }\r\n    },\r\n\r\n    searchInternal: (game, currentSurvivor, currentPlace, actionIndex) => {\r\n        game.itemCardAnimationType = 'get';\r\n        game.currentSurvivor = currentSurvivor;\r\n        game.currentSurvivor.place = currentPlace;\r\n\r\n        const newItemCard = currentPlace.itemCardList.pop();\r\n\r\n        if (newItemCard.category === '외부인') {\r\n            gameStore.addSurvivor(game, newItemCard);\r\n        } else {\r\n            game.currentPlayer.itemCardList = [newItemCard, ...game.currentPlayer.itemCardList];\r\n        }\r\n\r\n        if (actionIndex !== undefined) {\r\n            game.currentPlayer.actionDiceList[actionIndex].done = true;\r\n        }\r\n    },\r\n\r\n    setUseAbility: (game, currentSurvivor) => {\r\n        const targetSurvivor = game.placeList.flatMap(place => place.survivorList)\r\n            .find(survivor => survivor.index === currentSurvivor.index);\r\n\r\n        targetSurvivor.canUseAbility = false;\r\n\r\n        return targetSurvivor;\r\n    },\r\n\r\n    useAbility: (currentSurvivor, currentPlace, actionIndex) => {\r\n        const currentPlaceName = currentPlace.name;\r\n        const placeNameList = currentSurvivor.ability.placeNameList ?? [];\r\n        const currentPlayer = gameStore.getCurrentPlayer();\r\n        currentSurvivor.noRollDangerDice = true;\r\n\r\n        if (currentSurvivor.ability.type === 'killZombie') {\r\n            u(game => {\r\n                gameStore.killZombieWithGame(currentSurvivor, currentPlace, actionIndex);\r\n                const targetSurvivor = gameStore.setUseAbility(g, currentSurvivor);\r\n                targetSurvivor.noRollDangerDice = false;\r\n            });\r\n        } else if (currentSurvivor.ability.type === 'get') {\r\n            u(game => {\r\n                gameStore.searchInternal(g, currentSurvivor, currentPlace, actionIndex);\r\n                gameStore.setUseAbility(g, currentSurvivor);\r\n            });\r\n        } else if (currentSurvivor.ability.type === 'move') {\r\n            u(game => {\r\n                g.modalClass = 'show';\r\n                g.modalType = 'move';\r\n                g.currentSurvivor = currentSurvivor;\r\n                g.currentSurvivor.place = currentPlace;\r\n                g.currentActionIndex = actionIndex;\r\n                currentSurvivor.canUseAbility = false;\r\n            });\r\n        } else if (currentSurvivor.ability.type === 'care') {\r\n            u(game => {\r\n                g.currentSurvivor = currentSurvivor;\r\n                g.currentSurvivor.place = currentPlace;\r\n                g.currentPlace = currentPlace;\r\n                g.modalClass = 'show';\r\n                g.modalType = 'care';\r\n                g.currentActionIndex = actionIndex;\r\n            });\r\n        } else if (currentSurvivor.ability.type === 'food') {\r\n            u(game => {\r\n                const camp = gameStore.getCamp();\r\n                gameStore.addFood(game, camp, 2);\r\n                currentSurvivor.canUseAbility = false;\r\n                g.currentPlayer.actionDiceList[actionIndex].done = true;\r\n                return g;\r\n            });\r\n        } else if (currentSurvivor.ability.type === 'plusMoral') {\r\n            u(game => {\r\n                g.currentSurvivor = currentSurvivor;\r\n                g.currentSurvivor.place = currentPlace;\r\n                currentSurvivor.canUseAbility = false;\r\n                g.currentPlayer.actionDiceList[actionIndex].done = true;\r\n            });\r\n\r\n            gameStore.dead(false, undefined, currentPlace);\r\n            gameStore.plusMoral();\r\n\r\n            alert('사기가 상승하였습니다.');\r\n        } else if (currentSurvivor.ability.type === 'rescue') {\r\n            u(game => {\r\n                const targetPlace = g.placeList\r\n                    .find(place => place.name === currentPlace.name);\r\n\r\n                let rescued = false;\r\n                let rescueItemCard = null;\r\n\r\n                targetPlace.itemCardList =\r\n                    targetPlace.itemCardList\r\n                        .filter(itemCard => {\r\n                            if (rescued === false && itemCard.category === '외부인') {\r\n                                rescueItemCard = itemCard;\r\n                                rescued = true;\r\n                                return false;\r\n                            }\r\n\r\n                            return true;\r\n                        });\r\n\r\n                gameStore.addSurvivor(g, rescueItemCard)\r\n                g.currentSurvivor = currentSurvivor;\r\n                g.currentSurvivor.place = currentPlace;\r\n                currentSurvivor.canUseAbility = false;\r\n                g.currentPlayer.actionDiceList[actionIndex].done = true;\r\n            });\r\n        } else if (currentSurvivor.ability.type === 'clean') {\r\n            update(game => {\r\n                game.currentSurvivor = currentSurvivor;\r\n                g.currentSurvivor.place = currentPlace;\r\n                game.currentSurvivor.canUseAbility = false;\r\n                return game;\r\n            });\r\n\r\n            gameStore.clean(5, actionIndex);\r\n        } else if (currentSurvivor.ability.type === 'barricade') {\r\n            update(game => {\r\n                game.currentSurvivor = currentSurvivor;\r\n                g.currentSurvivor.place = currentPlace;\r\n                game.currentSurvivor.canUseAbility = false;\r\n                return game;\r\n            });\r\n\r\n            for (let i = 0; i < 2; i++) {\r\n                gameStore.createBarricade(currentPlace, actionIndex);\r\n            }\r\n        }\r\n    },\r\n\r\n    use:  async (currentItemCard) => {\r\n        u(game => {\r\n            g.currentPlayer.itemCardList = g.currentPlayer.itemCardList\r\n                .filter(itemCard => itemCard.index !== currentItemCard.index);\r\n\r\n            const camp = gameStore.getCamp();\r\n\r\n            if (currentItemCard.feature === 'power') {\r\n                g.currentPlayer.actionDiceList[g.selectedActionIndex].power++;\r\n            } else if (currentItemCard.feature === 'food') {\r\n                gameStore.addFood(g, camp, currentItemCard.targetCount);\r\n            } else if (currentItemCard.feature === 'clean') {\r\n                gameStore.clean(4);\r\n            } else if (currentItemCard.feature === 'search') {\r\n                const currentPlace = g.placeList\r\n                    .find(place => place.name === currentItemCard.placeNameList[0]);\r\n\r\n                gameStore.search(g, g.currentSurvivor, currentPlace);\r\n            } else if (currentItemCard.feature === 'attack') {\r\n                for (let i = 0; i < currentItemCard.targetCount; i++) {\r\n                    gameStore.killZombieWithGame(g.currentSurvivor, g.currentPlace)\r\n                }\r\n            } else if (currentItemCard.feature === 'barricade') {\r\n                gameStore.createBarricade(g.currentPlace);\r\n            } else if (currentItemCard.feature === 'care') {\r\n                for (let i = 0; i < currentItemCard.targetCount; i++) {\r\n                    g.currentSurvivor.wound--;\r\n\r\n                    if (g.currentSurvivor.wound === 0) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        u(game => {\r\n            const camp = gameStore.getCamp();\r\n            camp.trashList = [...camp.trashList, currentItemCard];\r\n            camp.trashCount = camp.trashList.length;\r\n            g.campTrashIndex++\r\n\r\n            g.selectedItemCardFeature = null;\r\n            g.currentPlace = null;\r\n        });\r\n    },\r\n\r\n    cancel: (currentItemCard) => {\r\n        u(game => {\r\n            g.selectedItemCardFeature = null;\r\n        });\r\n    },\r\n\r\n    attack: (currentSurvivor, currentPlace, actionIndex) => {\r\n        u(game => {\r\n            g.actionType = 'attack';\r\n            gameStore.killZombieWithGame(currentSurvivor, currentPlace, actionIndex);\r\n        });\r\n    },\r\n\r\n    random: (a, b) => {\r\n        return Math.random() - 0.5;\r\n    },\r\n    \r\n    killZombieWithGame: (currentSurvivor, currentPlace, actionIndex) => {\r\n        g.currentSurvivor = currentSurvivor;\r\n        g.currentSurvivor.place = currentPlace;\r\n\r\n        if (currentPlace.currentZombieCount > 0) {\r\n            const currentPlayer = gameStore.getCurrentPlayer(game);\r\n\r\n            if (actionIndex !== undefined) {\r\n                currentPlayer.actionDiceList[actionIndex].done = true;\r\n            }\r\n\r\n            const currentEntrance = currentPlace.entranceList\r\n                .filter(entrance => entrance.zombieCount > 0)\r\n                .sort(gameStore.random)[0];\r\n\r\n            currentEntrance.zombieCount--;\r\n            currentPlace.currentZombieCount--;\r\n            game.deadZombieCount++;\r\n            game.deadZombieList.push(game.deadZombieCount);\r\n\r\n            if (currentSurvivor.noRollDangerDice === true) {\r\n                return;\r\n            }\r\n\r\n            if (actionIndex !== undefined) {\r\n                game.currentSurvivor = currentSurvivor;\r\n                game.currentSurvivor.place = currentPlace;\r\n                gameStore.rollDangerActionDice(currentSurvivor, true);\r\n            }\r\n        }\r\n    },\r\n\r\n    createBarricade: (currentPlace, actionIndex) => {\r\n        u(game => {\r\n            const currentPlayer = gameStore.getCurrentPlayer(g);\r\n\r\n            if (actionIndex !== undefined) {\r\n                currentPlayer.actionDiceList[actionIndex].done = true;\r\n            }\r\n\r\n            const currentEntrance = currentPlace.entranceList\r\n                .filter(entrance => entrance.maxZombieCount > entrance.zombieCount + entrance.barricadeCount)\r\n                .sort(gameStore.random)[0];\r\n\r\n            currentEntrance.barricadeCount++;\r\n        });\r\n    },\r\n\r\n    inviteZombie: (currentPlace, actionIndex, zombieCount) => {\r\n        zombieCount = zombieCount || 2;\r\n\r\n        u(game => {\r\n            const currentPlayer = gameStore.getCurrentPlayer(game);\r\n\r\n            if (actionIndex !== undefined) {\r\n                currentPlayer.actionDiceList[actionIndex].done = true;\r\n            }\r\n\r\n            for (let i = 0; i < zombieCount; i++) {\r\n                const entranceList = currentPlace.entranceList\r\n                    .filter(entrance => entrance.maxZombieCount > entrance.zombieCount + entrance.barricadeCount)\r\n                    .sort(gameStore.random);\r\n\r\n                if (entranceList.length > 0) {\r\n                    const currentEntrance = entranceList[0];\r\n\r\n                    currentEntrance.zombieCount += 1;\r\n                    currentEntrance.zombieList.push(g.entranceZombieIndex++);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    showZombie: (messageList) => {\r\n        let showZombieCount = 0;\r\n\r\n        u(game => {\r\n            g.placeList.forEach(place => {\r\n                const zombieCount = place.survivorList.length;\r\n\r\n                if (zombieCount > 0) {\r\n                    if (showZombieCount === 0) {\r\n                        messageList.push('라운드가 종료될때 마다 좀비가 타나납니다.');\r\n                        showZombieCount++;\r\n                    }\r\n\r\n                    const message = `좀비가 ${place.name}에 ${zombieCount}구가 출몰하였습니다.`;\r\n                    messageList.push(message);\r\n\r\n                    for (let i = 0; i < zombieCount; i++) {\r\n                        const currentEntrance = place.entranceList\r\n                            .sort(gameStore.random)[0];\r\n\r\n                        currentEntrance.zombieCount++;\r\n                        let currentZombieCount = currentEntrance.zombieCount;\r\n\r\n                        if (currentEntrance.maxZombieCount < currentEntrance.zombieCount + currentEntrance.barricadeCount) {\r\n                            if (currentEntrance.barricadeCount > 0) {\r\n                                currentEntrance.barricadeCount--;\r\n\r\n                                const message = `${place.name}에 바리케이트가 제거되었습니다.`;\r\n                                messageList.push(message);\r\n                            } else {\r\n                                currentEntrance.zombieCount--;\r\n\r\n                                if (place.survivorList.length > 0) {\r\n                                    const randomIndex = Math.floor(Math.random() * place.survivorList.length);\r\n                                    g.currentSurvivor = place.survivorList[randomIndex];\r\n                                    g.currentSurvivor.place = place;\r\n                                    gameStore.dead(true, messageList, place);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (currentZombieCount > currentEntrance.zombieCount ) {\r\n                            currentEntrance.zombieList.push(game.entranceZombieIndex++);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    clean: (trashCount, actionIndex) => {\r\n        u(game => {\r\n            const camp = gameStore.getCamp(g);\r\n\r\n            for (let i = 0; i < trashCount; i++) {\r\n                camp.trashList.pop();\r\n                camp.trashCount = camp.trashList.length;\r\n\r\n                if (camp.trashCount === 0) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (actionIndex !== undefined) {\r\n                g.playerList[g.turn % 2].actionDiceList[actionIndex].done = true;\r\n            }\r\n        });\r\n    },\r\n\r\n    choiceRiskCard: () => {\r\n        u(game => {\r\n            g.successRiskCardList = [];\r\n            g.currentRiskCard = g.riskCardList.pop();\r\n            g.riskCardList = [...g.riskCardList, g.currentRiskCard];\r\n\r\n            gameStore.initRiskCard();\r\n\r\n            g.riskCard = false;\r\n            game.rollDice = true;\r\n        });\r\n    },\r\n\r\n    rollActionDice: () => {\r\n        u(game => {\r\n            game.messageList = [];\r\n        });\r\n\r\n        u(game => {\r\n            const player = gameStore.getCurrentPlayer(g);\r\n\r\n            player.actionDiceList = [...Array(player.survivorList.length + 1).keys()]\r\n                .map(i => {\r\n                    return {\r\n                        power: 1 + Math.floor(Math.random() * 6),\r\n                        done: false\r\n                    };\r\n                })\r\n                .sort((a, b) => b.power - a.power);\r\n\r\n            g.rollDice = false;\r\n            g.canAction = true;\r\n            g.canTurn = false;\r\n        });\r\n    },\r\n\r\n    dead: (minusMoral, messageList, currentPlace) => {\r\n        let oldMoral = 0;\r\n        let newMoral = 0;\r\n        let currentSurvivorName = '';\r\n\r\n        u(game => {\r\n            g.deadSurvivorCount++\r\n            g.deadSurvivorList.push(g.currentSurvivor);\r\n\r\n            g.placeList\r\n                .filter(place => {\r\n                    if (currentPlace === undefined) {\r\n                        return true;\r\n                    }\r\n\r\n                    return place.name === currentPlace.name;\r\n                })\r\n                .forEach(place => {\r\n                    place.survivorList = place.survivorList\r\n                        .filter(survivor => survivor !== game.currentSurvivor)\r\n                });\r\n\r\n            minusMoral = minusMoral && game.moral > 0;\r\n\r\n            if (minusMoral === true) {\r\n                oldMoral = game.moral;\r\n                game.moral--;\r\n                newMoral = game.moral;\r\n            }\r\n\r\n            currentSurvivorName = game.currentSurvivor.name;\r\n            g.currentSurvivor = null;\r\n        });\r\n\r\n        const message = `${currentPlace.name}에 있던 ${currentSurvivorName} 생존자가 죽었습니다.`;\r\n\r\n        if (messageList !== undefined) {\r\n            messageList.push(message);\r\n            gameStore.showMessage(messageList);\r\n        } else {\r\n            alert(message);\r\n        }\r\n\r\n        if (minusMoral === true) {\r\n            const message = `사기가 ${oldMoral}에서 ${newMoral}로 떨어졌습니다.`;\r\n\r\n            if (messageList !== undefined) {\r\n                messageList.push(message);\r\n                gameStore.showMessage(messageList);\r\n            } else {\r\n                alert(message);\r\n            }\r\n        }\r\n    },\r\n\r\n    wound: (messageList) => {\r\n        u(game => {\r\n            g.currentSurvivor.wound++;\r\n\r\n            const message = `${g.currentSurvivor.name} 부상을 입었습니다.`;\r\n\r\n            if (messageList !== undefined) {\r\n                messageList.push(message);\r\n                gameStore.showMessage(messageList);\r\n            } else {\r\n                alert(message);\r\n            }\r\n\r\n            if (g.currentSurvivor.wound >= 3) {\r\n                const message = `${g.currentSurvivor.name} 부상을 3차례 입었습니다.'`;\r\n\r\n                if (messageList !== undefined) {\r\n                    messageList.push(message);\r\n                    gameStore.showMessage(messageList);\r\n                } else {\r\n                    alert(message);\r\n                }\r\n\r\n                gameStore.dead(true);\r\n            }\r\n\r\n            g.currentSurvivor = null;\r\n        });\r\n    },\r\n\r\n    rollDangerActionDice: (survivor, killZombie) => {\r\n        const currentSurvivor = get(gameStore).currentSurvivor;\r\n\r\n        if (currentSurvivor === null || survivor == null ||\r\n            currentSurvivor.name !== survivor.name) {\r\n            return;\r\n        }\r\n\r\n        const currentActionIndex = get(gameStore).currentActionIndex;\r\n\r\n        if (currentActionIndex >= 0) {\r\n            u(game => {\r\n                g.currentActionIndex = -1;\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        const saveMoveCount = get(gameStore).currentPlayer.itemCardList\r\n            .filter(itemCard => itemCard.feature === 'safeMove')\r\n            .length;\r\n\r\n        let rollDangerDice = true;\r\n\r\n        if (killZombie === undefined && saveMoveCount > 0) {\r\n            rollDangerDice = !confirm(`연료 아이템이 ${saveMoveCount}개가 있으며 하나를 사용하여 위험노출 주사위를 굴리지 않고 이동할까요?`);\r\n        }\r\n\r\n        if (!rollDangerDice) {\r\n            u(game => {\r\n                let use = false;\r\n\r\n                g.playerList\r\n                    .filter(player => player.index === g.currentPlayer.index)\r\n                    .forEach(player => {\r\n                        player.itemCardList = player.itemCardList\r\n                            .filter(itemCard => {\r\n                                if (use === false && itemCard.feature === 'safeMove') {\r\n                                    use = true;\r\n                                    return false;\r\n                                }\r\n\r\n                                return true;\r\n                            });\r\n                    });\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        alert('위험노출 주사위를 던집니다.');\r\n\r\n        u(game => {\r\n            const dangerDice = ['', '', '', '', '', '', '부상', '부상', '부상', '부상', '부상', '연쇄물림']\r\n            const result = dangerDice.sort(gameStore.random).pop();\r\n\r\n            if (result === '') {\r\n                alert('아무런 일이 일어나지 않았습니다.');\r\n            } else if (result === '부상') {\r\n                alert('부상을 당하였습니다.');\r\n                gameStore.wound();\r\n            } else if (result === '연쇄물림') {\r\n                alert('연쇄물림이 발생하였습니다.');\r\n\r\n                const currentPlace = currentSurvivor.place;\r\n\r\n                gameStore.dead(true);\r\n\r\n                currentPlace.survivorList.forEach(survivor => {\r\n                    g.currentSurvivor = survivor;\r\n                    g.currentSurvivor.place = currentPlace;\r\n                    gameStore.wound();\r\n                })\r\n            }\r\n\r\n            g.dangerDice = false;\r\n        });\r\n    },\r\n\r\n    canUseAbility: (survivor) => {\r\n        const currentPlace = survivor.place;\r\n        const currentPlaceName = currentPlace.name;\r\n        const placeNameList = survivor.ability.placeNameList ?? [];\r\n        const currentPlayer = gameStore.getCurrentPlayer();\r\n\r\n        if (survivor.canUseAbility === false) {\r\n            return false;\r\n        }\r\n\r\n        if (survivor.ability.type === 'killZombie') {\r\n            if (placeNameList.find(name => name === currentPlaceName)) {\r\n                return survivor.canUseAbility === true &&\r\n                    currentPlace.currentZombieCount > 0;\r\n            }\r\n\r\n            return false;\r\n        } else if (survivor.ability.type === 'get') {\r\n            if (placeNameList.find(name => name === currentPlaceName)) {\r\n                return currentPlace.itemCardList.length > 0;\r\n            }\r\n\r\n            return false;\r\n        } else if (survivor.ability.type === 'plusPower') {\r\n            if (currentPlayer.actionTable) {\r\n                return currentPlayer.actionDiceList\r\n                    .filter(dice => dice.power <= 5)\r\n                    .filter(dice => dice.done === false).length > 0;\r\n            }\r\n\r\n            return false;\r\n        } else if (survivor.ability.type === 'move') {\r\n            return get(gameStore).placeList\r\n                .filter(place => place.name !== survivor.place.name)\r\n                .filter(place => place.maxSurvivorCount > place.survivorList.length)\r\n                .length > 0\r\n        } else if (survivor.ability.type === 'care') {\r\n            return currentPlace.survivorList\r\n                .filter(survivor => survivor.wound > 0)\r\n                .length > 0;\r\n        } else if (survivor.ability.type === 'food') {\r\n            return true;\r\n        } else if (survivor.ability.type === 'plusMoral') {\r\n            return true;\r\n        } else if (survivor.ability.type === 'rescue') {\r\n            return currentPlace.itemCardList\r\n                .filter(item => item.name.startsWith(\"외부인\")).length > 0;\r\n        } else if (survivor.ability.type === 'clean') {\r\n            return true;\r\n        } else if (survivor.ability.type === 'barricade') {\r\n            return currentPlace.maxZombieCount >\r\n                currentPlace.currentZombieCount + currentPlace.currentBarricadeCount;\r\n        }\r\n    },\r\n\r\n    getPlaceClassName: (currentPlace) => {\r\n        if (currentPlace.name === get(gameStore).currentPlaceName) {\r\n            return \"current-place\";\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n\r\nupdateAll = gameStore.updateAll;\r\n\r\ngameStore.init();\r\n\r\nexport default gameStore;","export { identity as linear } from '../internal/index.mjs';\n\n/*\nAdapted from https://github.com/mattdesl\nDistributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md\n*/\nfunction backInOut(t) {\n    const s = 1.70158 * 1.525;\n    if ((t *= 2) < 1)\n        return 0.5 * (t * t * ((s + 1) * t - s));\n    return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);\n}\nfunction backIn(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n}\nfunction backOut(t) {\n    const s = 1.70158;\n    return --t * t * ((s + 1) * t + s) + 1;\n}\nfunction bounceOut(t) {\n    const a = 4.0 / 11.0;\n    const b = 8.0 / 11.0;\n    const c = 9.0 / 10.0;\n    const ca = 4356.0 / 361.0;\n    const cb = 35442.0 / 1805.0;\n    const cc = 16061.0 / 1805.0;\n    const t2 = t * t;\n    return t < a\n        ? 7.5625 * t2\n        : t < b\n            ? 9.075 * t2 - 9.9 * t + 3.4\n            : t < c\n                ? ca * t2 - cb * t + cc\n                : 10.8 * t * t - 20.52 * t + 10.72;\n}\nfunction bounceInOut(t) {\n    return t < 0.5\n        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\n}\nfunction bounceIn(t) {\n    return 1.0 - bounceOut(1.0 - t);\n}\nfunction circInOut(t) {\n    if ((t *= 2) < 1)\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n}\nfunction circIn(t) {\n    return 1.0 - Math.sqrt(1.0 - t * t);\n}\nfunction circOut(t) {\n    return Math.sqrt(1 - --t * t);\n}\nfunction cubicInOut(t) {\n    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\nfunction cubicIn(t) {\n    return t * t * t;\n}\nfunction cubicOut(t) {\n    const f = t - 1.0;\n    return f * f * f + 1.0;\n}\nfunction elasticInOut(t) {\n    return t < 0.5\n        ? 0.5 *\n            Math.sin(((+13.0 * Math.PI) / 2) * 2.0 * t) *\n            Math.pow(2.0, 10.0 * (2.0 * t - 1.0))\n        : 0.5 *\n            Math.sin(((-13.0 * Math.PI) / 2) * (2.0 * t - 1.0 + 1.0)) *\n            Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) +\n            1.0;\n}\nfunction elasticIn(t) {\n    return Math.sin((13.0 * t * Math.PI) / 2) * Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction elasticOut(t) {\n    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);\n}\nfunction expoInOut(t) {\n    return t === 0.0 || t === 1.0\n        ? t\n        : t < 0.5\n            ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)\n            : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;\n}\nfunction expoIn(t) {\n    return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction expoOut(t) {\n    return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);\n}\nfunction quadInOut(t) {\n    t /= 0.5;\n    if (t < 1)\n        return 0.5 * t * t;\n    t--;\n    return -0.5 * (t * (t - 2) - 1);\n}\nfunction quadIn(t) {\n    return t * t;\n}\nfunction quadOut(t) {\n    return -t * (t - 2.0);\n}\nfunction quartInOut(t) {\n    return t < 0.5\n        ? +8.0 * Math.pow(t, 4.0)\n        : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0;\n}\nfunction quartIn(t) {\n    return Math.pow(t, 4.0);\n}\nfunction quartOut(t) {\n    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\n}\nfunction quintInOut(t) {\n    if ((t *= 2) < 1)\n        return 0.5 * t * t * t * t * t;\n    return 0.5 * ((t -= 2) * t * t * t * t + 2);\n}\nfunction quintIn(t) {\n    return t * t * t * t * t;\n}\nfunction quintOut(t) {\n    return --t * t * t * t * t + 1;\n}\nfunction sineInOut(t) {\n    return -0.5 * (Math.cos(Math.PI * t) - 1);\n}\nfunction sineIn(t) {\n    const v = Math.cos(t * Math.PI * 0.5);\n    if (Math.abs(v) < 1e-14)\n        return 1;\n    else\n        return 1 - v;\n}\nfunction sineOut(t) {\n    return Math.sin((t * Math.PI) / 2);\n}\n\nexport { backIn, backInOut, backOut, bounceIn, bounceInOut, bounceOut, circIn, circInOut, circOut, cubicIn, cubicInOut, cubicOut, elasticIn, elasticInOut, elasticOut, expoIn, expoInOut, expoOut, quadIn, quadInOut, quadOut, quartIn, quartInOut, quartOut, quintIn, quintInOut, quintOut, sineIn, sineInOut, sineOut };\n","import { cubicOut } from '../easing/index.mjs';\nimport { is_function } from '../internal/index.mjs';\n\nfunction flip(node, { from, to }, params = {}) {\n    const style = getComputedStyle(node);\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const [ox, oy] = style.transformOrigin.split(' ').map(parseFloat);\n    const dx = (from.left + from.width * ox / to.width) - (to.left + ox);\n    const dy = (from.top + from.height * oy / to.height) - (to.top + oy);\n    const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;\n    return {\n        delay,\n        duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,\n        easing,\n        css: (t, u) => {\n            const x = u * dx;\n            const y = u * dy;\n            const sx = t + u * from.width / to.width;\n            const sy = t + u * from.height / to.height;\n            return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;\n        }\n    };\n}\n\nexport { flip };\n","import { cubicInOut, linear, cubicOut } from '../easing/index.mjs';\nimport { is_function, assign } from '../internal/index.mjs';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nfunction blur(node, { delay = 0, duration = 400, easing = cubicInOut, amount = 5, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const f = style.filter === 'none' ? '' : style.filter;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `opacity: ${target_opacity - (od * u)}; filter: ${f} blur(${u * amount}px);`\n    };\n}\nfunction fade(node, { delay = 0, duration = 400, easing = linear } = {}) {\n    const o = +getComputedStyle(node).opacity;\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => `opacity: ${t * o}`\n    };\n}\nfunction fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `\n\t\t\ttransform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);\n\t\t\topacity: ${target_opacity - (od * u)}`\n    };\n}\nfunction slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {\n    const style = getComputedStyle(node);\n    const opacity = +style.opacity;\n    const height = parseFloat(style.height);\n    const padding_top = parseFloat(style.paddingTop);\n    const padding_bottom = parseFloat(style.paddingBottom);\n    const margin_top = parseFloat(style.marginTop);\n    const margin_bottom = parseFloat(style.marginBottom);\n    const border_top_width = parseFloat(style.borderTopWidth);\n    const border_bottom_width = parseFloat(style.borderBottomWidth);\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => 'overflow: hidden;' +\n            `opacity: ${Math.min(t * 20, 1) * opacity};` +\n            `height: ${t * height}px;` +\n            `padding-top: ${t * padding_top}px;` +\n            `padding-bottom: ${t * padding_bottom}px;` +\n            `margin-top: ${t * margin_top}px;` +\n            `margin-bottom: ${t * margin_bottom}px;` +\n            `border-top-width: ${t * border_top_width}px;` +\n            `border-bottom-width: ${t * border_bottom_width}px;`\n    };\n}\nfunction scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const sd = 1 - start;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `\n\t\t\ttransform: ${transform} scale(${1 - (sd * u)});\n\t\t\topacity: ${target_opacity - (od * u)}\n\t\t`\n    };\n}\nfunction draw(node, { delay = 0, speed, duration, easing = cubicInOut } = {}) {\n    let len = node.getTotalLength();\n    const style = getComputedStyle(node);\n    if (style.strokeLinecap !== 'butt') {\n        len += parseInt(style.strokeWidth);\n    }\n    if (duration === undefined) {\n        if (speed === undefined) {\n            duration = 800;\n        }\n        else {\n            duration = len / speed;\n        }\n    }\n    else if (typeof duration === 'function') {\n        duration = duration(len);\n    }\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`\n    };\n}\nfunction crossfade(_a) {\n    var { fallback } = _a, defaults = __rest(_a, [\"fallback\"]);\n    const to_receive = new Map();\n    const to_send = new Map();\n    function crossfade(from, node, params) {\n        const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);\n        const to = node.getBoundingClientRect();\n        const dx = from.left - to.left;\n        const dy = from.top - to.top;\n        const dw = from.width / to.width;\n        const dh = from.height / to.height;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        const opacity = +style.opacity;\n        return {\n            delay,\n            duration: is_function(duration) ? duration(d) : duration,\n            easing,\n            css: (t, u) => `\n\t\t\t\topacity: ${t * opacity};\n\t\t\t\ttransform-origin: top left;\n\t\t\t\ttransform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});\n\t\t\t`\n        };\n    }\n    function transition(items, counterparts, intro) {\n        return (node, params) => {\n            items.set(params.key, {\n                rect: node.getBoundingClientRect()\n            });\n            return () => {\n                if (counterparts.has(params.key)) {\n                    const { rect } = counterparts.get(params.key);\n                    counterparts.delete(params.key);\n                    return crossfade(rect, node, params);\n                }\n                // if the node is disappearing altogether\n                // (i.e. wasn't claimed by the other list)\n                // then we need to supply an outro\n                items.delete(params.key);\n                return fallback && fallback(node, params, intro);\n            };\n        };\n    }\n    return [\n        transition(to_send, to_receive, false),\n        transition(to_receive, to_send, true)\n    ];\n}\n\nexport { blur, crossfade, draw, fade, fly, scale, slide };\n","import { crossfade } from 'svelte/transition';\r\n\r\nexport const itemCardCrossfade = crossfade({});\r\nexport const placeItemCardCrossfade = crossfade({});\r\nexport const foodCrossfade = crossfade({});\r\nexport const trashCrossfade = crossfade({});\r\nexport const deadSurvivorCrossfade = crossfade({});\r\nexport const deadZombieCrossfade = crossfade({});\r\n","<script>\r\n    import gameStore from \"./gameStore\";\r\n    import {flip} from 'svelte/animate';\r\n    import {itemCardCrossfade, trashCrossfade, placeItemCardCrossfade} from './animation';\r\n    const [itemCardSend, itemCardReceive] = itemCardCrossfade;\r\n    const [placeItemCardSend, placeItemCardReceive] = placeItemCardCrossfade;\r\n    const [trashSend, trashReceive] = trashCrossfade\r\n\r\n    export let playerIndex;\r\n\r\n    let player;\r\n    let playerList;\r\n    let currentPlayer;\r\n    let survivorList;\r\n    let itemCardTable;\r\n    let itemCardList;\r\n    let selectedItemCardFeature;\r\n    let itemCardAnimationType;\r\n    let send = itemCardSend;\r\n    let receive = itemCardReceive;\r\n\r\n    $: {\r\n        playerList = $gameStore.playerList;\r\n        itemCardAnimationType = $gameStore.itemCardAnimationType;\r\n        currentPlayer = $gameStore.currentPlayer;\r\n        selectedItemCardFeature = $gameStore.selectedItemCardFeature;\r\n        player = playerList[playerIndex];\r\n        survivorList = player.survivorList;\r\n        itemCardTable = player.itemCardTable;\r\n        itemCardList = player.itemCardList;\r\n\r\n        if (selectedItemCardFeature != null) {\r\n            send = trashSend;\r\n            receive = trashReceive;\r\n        } else {\r\n            if (itemCardAnimationType === 'risk') {\r\n                send = itemCardSend;\r\n                receive = itemCardReceive;\r\n            } else if (itemCardAnimationType === 'get') {\r\n                send = placeItemCardSend;\r\n                receive = placeItemCardReceive;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<div class=\"flex-column player-card-list-section\"\r\n     style=\"background-color: {currentPlayer.index === player.index ? gameStore.getCurrentPlayerColor() : 'white'}\">\r\n    <div style=\"display:flex;flex-direction:column;padding: 10px 5px\">\r\n        <div style=\"padding:5px 10px;border-radius: 10px;border:1px solid darkgray;text-align: center\">{player.name}</div>\r\n        <div style=\"margin-top: 5px\">아이템 카드 : {player.itemCardList.length}, 생존자 : {player.survivorList.length}</div>\r\n    </div>\r\n    <div style=\"height:100vh\">\r\n        {#each itemCardList as itemCard (itemCard)}\r\n            <table class=\"game-table box\"\r\n                   animate:flip\r\n                   in:receive={{key: itemCard}}\r\n                   out:send={{key: itemCard}}\r\n                   style=\"width: 190px;margin: 5px\">\r\n                <tr>\r\n                    <td class=\"active\">이름</td>\r\n                    <td class=\"active\">{itemCard.name}</td>\r\n                    <td class=\"active\">유형</td>\r\n                    <td>{itemCard.category}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td colspan=\"4\">{itemCard.description}\r\n                        {#if itemCard.canPreventRisk == true}\r\n                            <button class=\"card-action-dice-button\"\r\n                                    on:click={()=>gameStore.preventRisk(itemCard)}>위기사항처리</button>\r\n                        {/if}\r\n\r\n                        {#if itemCard.canAction == true}\r\n                            <button class=\"none-action-dice-button\"\r\n                                    on:click={()=>gameStore.use(itemCard)}>사용</button>\r\n                            <button class=\"none-action-dice-button\"\r\n                                    on:click={()=>gameStore.cancel(itemCard)}>취소</button>\r\n                        {/if}\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        {/each}\r\n    </div>\r\n</div>\r\n\r\n","<script>\r\n    import gameStore from \"./gameStore\";\r\n    import {flip} from 'svelte/animate';\r\n    import {foodCrossfade, deadSurvivorCrossfade, deadZombieCrossfade} from './animation';\r\n    const [foodSend, foodReceive] = foodCrossfade;\r\n    const [deadSurvivorSend, deadSurvivorReceive] = deadSurvivorCrossfade;\r\n    const [deadZombieSend, deadZombieReceive] = deadZombieCrossfade;\r\n    export let placeIndex;\r\n\r\n    const survivorCountPerRow = 4;\r\n\r\n    let placeList;\r\n    let currentPlace;\r\n    let survivorList;\r\n    let survivorLocationList;\r\n    let survivorAreaTable = [];\r\n    let currentPlayer;\r\n    let dangerDice;\r\n    let selectedItemCardFeature;\r\n    let itemCardList;\r\n    let deadSurvivorList;\r\n    let deadZombieList;\r\n\r\n    $: {\r\n        currentPlayer = gameStore.getCurrentPlayer();\r\n        placeList = $gameStore.placeList;\r\n        dangerDice = $gameStore.dangerDice;\r\n        itemCardList = $gameStore.itemCardList;\r\n        selectedItemCardFeature = $gameStore.selectedItemCardFeature;\r\n        currentPlace = placeList[placeIndex];\r\n        survivorList = currentPlace.survivorList;\r\n        survivorLocationList = currentPlace.survivorLocationList;\r\n        deadSurvivorList = $gameStore.deadSurvivorList;\r\n        deadZombieList = $gameStore.deadZombieList;\r\n    }\r\n</script>\r\n\r\n<div class=\"place place-part\">\r\n    <div style=\"display: flex\">\r\n        {#each itemCardList as itemCard (itemCard)}\r\n            <div style=\"width:1px;height:1px\"></div>\r\n        {/each}\r\n    </div>\r\n    <div>\r\n        <div style=\"display: flex\">\r\n                <div style=\"display: flex\">\r\n                    <table class=\"game-table\">\r\n                        <tr>\r\n                            <td class=\"active\">횟수</td>\r\n                            <td class=\"game-info\">{$gameStore.turn + 1}</td>\r\n                            <td class=\"active\">라운드</td>\r\n                            <td class=\"game-info\">{$gameStore.round}</td>\r\n                            <td class=\"active\">사기</td>\r\n                            <td class=\"game-info\">{$gameStore.moral}</td>\r\n                            <td class=\"active\">생존자</td>\r\n                            <td class=\"game-info\">{$gameStore.survivorCount}</td>\r\n                            <td class=\"active\">죽은 생존자</td>\r\n                            <td class=\"game-info\">\r\n                                <div style=\"display: flex\">\r\n                                    <div>{$gameStore.deadSurvivorCount}</div>\r\n                                    <div style=\"display:flex; width:50px; flex-wrap: wrap; margin-left: 5px\">\r\n                                        {#each deadSurvivorList as surviror (surviror)}\r\n                                            <div in:deadSurvivorReceive={{key: surviror}}\r\n                                                 out:deadSurvivorSend={{key: surviror}}>\r\n                                                <div style=\"width: 5px;height:5px;background-color: lightgreen;border:1px solid greenyellow\"></div>\r\n                                            </div>\r\n                                        {/each}\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                            <td class=\"active\">좀비</td>\r\n                            <td class=\"game-info\">{$gameStore.zombieCount}</td>\r\n                            <td class=\"active\">죽은 좀비</td>\r\n                            <td class=\"game-info\">\r\n                                <div style=\"display: flex\">\r\n                                    <div>{$gameStore.deadZombieCount}</div>\r\n                                    <div style=\"display:flex; width:50px; flex-wrap: wrap; margin-left: 5px\">\r\n                                        {#each deadZombieList as deadZombie (deadZombie)}\r\n                                            <div in:deadZombieReceive={{key: deadZombie}}\r\n                                                 out:deadZombieSend={{key: deadZombie}}>\r\n                                                <div style=\"width: 5px;height:5px;background-color: lightsalmon;border:1px solid red\"></div>\r\n                                            </div>\r\n                                        {/each}\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <div style=\"margin-left: 20px\">\r\n                        <button class=\"game-button dice action-button\" disabled={!$gameStore.riskCard}\r\n                                style=\"height: 30px\"\r\n                                on:click={()=>gameStore.choiceRiskCard()}>\r\n                            위기상황카드\r\n                        </button>\r\n\r\n                        <button class=\"game-button dice action-button\" disabled={!$gameStore.rollDice}\r\n                                style=\"height: 30px\"\r\n                                on:click={()=>gameStore.rollActionDice()}>행동 주사위</button>\r\n\r\n                        <button class=\"game-button action-button\" disabled={!$gameStore.canTurn}\r\n                                style=\"height: 30px\"\r\n                                on:click={()=>gameStore.turn()}>완료</button>\r\n                    </div>\r\n                </div>\r\n            <div style=\"display: table;margin-left: 10px\">\r\n            <div class=\"place-name\">{currentPlace.name}</div>\r\n            </div>\r\n            <div class=\"flex\"\r\n                 style=\"justify-content: space-evenly; align-content: flex-start; margin: 2px\">\r\n                {#each currentPlace.entranceList as entrance, entranceIndex}\r\n                    <table class=\"game-table zombie-line\">\r\n                        <tr>\r\n                            {#each Array(currentPlace.entranceList[entranceIndex].maxZombieCount) as _, zombieIndex}\r\n                                <td class=\"zombie-position\">\r\n                                    {#if zombieIndex < currentPlace.entranceList[entranceIndex].zombieCount}\r\n                                        <div in:deadZombieReceive={{key: currentPlace.entranceList[entranceIndex].zombieList[zombieIndex]}}\r\n                                             out:deadZombieSend={{key: currentPlace.entranceList[entranceIndex].zombieList[zombieIndex]}}\r\n                                             style=\"width:100%;height:100%;background-color: darkred\"></div>\r\n                                    {:else if currentPlace.entranceList[entranceIndex].maxZombieCount - zombieIndex <= currentPlace.entranceList[entranceIndex].barricadeCount}\r\n                                        <div style=\"width:100%;height:100%;background-color: lightgray\"></div>\r\n                                    {/if}\r\n                                </td>\r\n                            {/each}\r\n                        </tr>\r\n                    </table>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"flex survivor-container\">\r\n        {#each currentPlace.survivorLocationList as survivor, index (survivor??index)}\r\n            <div in:deadSurvivorReceive={{key: survivor}}\r\n                 out:deadSurvivorSend={{key: survivor}}\r\n                 on:introend={() => gameStore.rollDangerActionDice(survivor)}\r\n                 style=\"border: 1px solid lightgreen\">\r\n                <div class=\"survivor-position\">\r\n                    {#if survivor}\r\n                        <table class=\"game-table\" style=\"width: 100%\">\r\n                            <tr>\r\n                                <td rowspan=\"2\" style=\"width:40px;\" valign=\"top\">\r\n                                    <img src=\"image/{survivor.index}.png\" style=\"width: 60px;height:60px\" alt=\"\">\r\n                                </td>\r\n                                <td style=\"background-color: {gameStore.getPlayerColorForSurvivor(survivor)}\">\r\n                                    <div style=\"display:flex\">\r\n                                        <div style=\" display: flex;align-items: center;\">\r\n                                            <span style=\"padding:2px 10px;border-radius: 10px;border:1px solid darkgray\">{survivor.playerName}</span>\r\n                                            <div style=\"display: inline-block;margin-left: 4px\">{survivor.name}</div>\r\n                                        </div>\r\n                                        <table class=\"game-table\" style=\"margin-left: 5px\">\r\n                                            <tr>\r\n                                                <td>파워</td>\r\n                                                <td>{survivor.power}</td>\r\n                                                <td>공격</td>\r\n                                                <td>{survivor.attack}</td>\r\n                                                <td>검색</td>\r\n                                                <td>{survivor.search}</td>\r\n                                                <td>부상</td>\r\n                                                <td>\r\n                                                    <div style=\"display: flex;align-items: center;justify-content: center;\">\r\n                                                        <div>{survivor.wound}</div>\r\n                                                        {#each survivor.woundList as wound, woundIndex}\r\n                                                            <div style=\"width:10px;height:10px;border-radius:10px;background-color: lightsalmon;border:1px solid red\"></div>\r\n                                                        {/each}\r\n                                                    </div>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </table>\r\n                                        <div style=\"display: flex\">\r\n                                            {#each survivor.foodList as food, index (food)}\r\n                                                <div animate:flip\r\n                                                     in:foodReceive={{key: food}}\r\n                                                     out:foodSend={{key: food}}>\r\n                                                    <div style=\"margin-top: 3px;width: 10px;height:10px;background-color: lightgreen;border:1px solid greenyellow;\"></div>\r\n                                                </div>\r\n                                            {/each}\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    {survivor.job} : {survivor.ability.name}\r\n\r\n                                    {#if survivor.canUseAbility == false}\r\n                                        <span style=\"background-color: lightgreen\">능력을 사용하였습니다.</span>\r\n                                    {/if}\r\n                                </td>\r\n                            </tr>\r\n                            {#if survivor.actionTable.length > 0 && gameStore.isCurrentPlayerOfSurvivor(survivor) == true}\r\n                                <tr>\r\n                                    <td colspan=\"2\">\r\n                                        {#each survivor.targetPlaceList as place}\r\n                                            <button class=\"none-action-dice-button\"\r\n                                                    disabled={place.disabled}\r\n                                                    style=\"margin-right: 5px\"\r\n                                                    on:click={gameStore.move(survivor, place.name)}>{place.name}</button>\r\n                                        {/each}\r\n                                        로 이동\r\n                                    </td>\r\n                                </tr>\r\n                            {/if}\r\n\r\n                            {#if survivor.actionTable.length > 0}\r\n                                <tr>\r\n                                    <td colspan=\"2\">\r\n                                        <table class=\"game-table\" style=\"width: 100%\">\r\n                                            {#each survivor.actionTable as action, actionIndex}\r\n                                                <tr>\r\n                                                    <td style=\"width: 20px;text-align:center;background-color: {action.dice.done ? 'lightgray' : 'lightgreen'}\">\r\n                                                        <span style=\"cursor: pointer\" on:click|preventDefault={() => gameStore.done(survivor, actionIndex)} alt=\"행동주사위 포기\">{action.dice.power}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <button class=\"food-action-dice-button\"\r\n                                                            disabled={!action.food}\r\n                                                            on:click={() => gameStore.plusPower(survivor, currentPlace, actionIndex)}>\r\n                                                            식사+1</button>\r\n                                                        <button class=\"card-action-dice-button\"\r\n                                                                disabled={!action.itemFood}\r\n                                                                on:click={() => gameStore.selectItemCard(currentPlace, actionIndex)}>\r\n                                                            아이템+1</button>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <button class=\"action-dice-button\"\r\n                                                                disabled={!action.attack}\r\n                                                            on:click={() => gameStore.attack(survivor, currentPlace, actionIndex)}>\r\n                                                            공격</button>\r\n                                                    </td>\r\n                                                    <td><button\r\n                                                            class=\"action-dice-button\"\r\n                                                            disabled={!action.search}\r\n                                                            on:click={() => gameStore.search(null, survivor, currentPlace, actionIndex)}>\r\n                                                        검색</button></td>\r\n                                                    <td><button\r\n                                                            class=\"action-dice-button\"\r\n                                                            disabled={!action.ability}\r\n                                                            on:click={() => gameStore.useAbility(survivor, currentPlace, actionIndex)}>\r\n                                                        능력</button></td>\r\n                                                    <td>\r\n                                                        <button\r\n                                                            class=\"action-dice-button\"\r\n                                                            disabled={!action.barricade}\r\n                                                            on:click={() => gameStore.createBarricade(currentPlace, actionIndex)}>\r\n                                                        바리케이트</button>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <button class=\"action-dice-button\"\r\n                                                            disabled={!action.invite}\r\n                                                            on:click={() => gameStore.inviteZombie(currentPlace, actionIndex)}>\r\n                                                            유인</button>\r\n                                                    </td>\r\n                                                    <td><button\r\n                                                            class=\"action-dice-button\"\r\n                                                            on:click={() => gameStore.clean(3, actionIndex)}\r\n                                                            disabled={!action.clean}>청소</button></td>\r\n\r\n                                                </tr>\r\n                                            {/each}\r\n                                            {#if survivor.actionItemCard.enabled}\r\n                                                <tr>\r\n                                                    <td></td>\r\n                                                    <td><button class=\"card-action-dice-button\"\r\n                                                                disabled={!survivor.actionItemCard.food}\r\n                                                                on:click={() => gameStore.selectItemCardWithoutDice(currentPlace, survivor, 'food')}>\r\n                                                        식량공급</button></td>\r\n                                                    <td><button class=\"card-action-dice-button\"\r\n                                                                disabled={!survivor.actionItemCard.attack}\r\n                                                                on:click={() => gameStore.selectItemCardWithoutDice(currentPlace, survivor, 'attack')}>\r\n                                                        공격</button></td>\r\n                                                    <td><button class=\"card-action-dice-button\"\r\n                                                                disabled={!survivor.actionItemCard.search}\r\n                                                                on:click={() => gameStore.selectItemCardWithoutDice(currentPlace, survivor, 'search')}>\r\n                                                        검색</button></td>\r\n                                                    <td><button class=\"card-action-dice-button\"\r\n                                                                disabled={!survivor.actionItemCard.care}\r\n                                                                on:click={() => gameStore.selectItemCardWithoutDice(currentPlace, survivor, 'care')}>\r\n                                                        치료</button></td>\r\n                                                    <td><button class=\"card-action-dice-button\"\r\n                                                                disabled={!survivor.actionItemCard.barricade}\r\n                                                                on:click={() => gameStore.selectItemCardWithoutDice(currentPlace, survivor, 'barricade')}>\r\n                                                        바리케이트</button></td>\r\n                                                    <td></td>\r\n                                                    <td><button class=\"card-action-dice-button\"\r\n                                                                disabled={!survivor.actionItemCard.clean}\r\n                                                                on:click={() => gameStore.selectItemCardWithoutDice(currentPlace, survivor, 'clean')}>\r\n                                                        청소</button></td>\r\n                                                </tr>\r\n                                            {/if}\r\n                                        </table>\r\n                                    </td>\r\n                                </tr>\r\n                            {/if}\r\n                        </table>\r\n                    {/if}\r\n                </div>\r\n            </div>\r\n        {/each}\r\n    </div>\r\n</div>","<script>\r\n    import gameStore from \"./gameStore\";\r\n    import Place from \"./Place.svelte\";\r\n    import {flip} from 'svelte/animate';\r\n    import {itemCardCrossfade, trashCrossfade, foodCrossfade, deadSurvivorCrossfade, placeItemCardCrossfade} from './animation';\r\n    const [itemCardSend, itemCardReceive] = itemCardCrossfade;\r\n    const [placeItemCardSend, placeItemCardReceive] = placeItemCardCrossfade;\r\n    const [trashSend, trashReceive] = trashCrossfade;\r\n    const [foodSend, foodReceive] = foodCrossfade;\r\n    const [deadSurvivorSend, deadSurvivorReceive] = deadSurvivorCrossfade;\r\n\r\n    let placeList;\r\n    let playerList;\r\n    let deadSurvivorList;\r\n    let currentRiskCard;\r\n    let successRiskCardList;\r\n    let camp;\r\n    let actionTable;\r\n    let messageList;\r\n    let goal;\r\n\r\n    $: {\r\n        placeList = $gameStore.placeList;\r\n        playerList = $gameStore.playerList;\r\n        goal = $gameStore.goal;\r\n        messageList = $gameStore.messageList;\r\n        deadSurvivorList = $gameStore.deadSurvivorList;\r\n        currentRiskCard = $gameStore.currentRiskCard;\r\n        successRiskCardList = $gameStore.successRiskCardList;\r\n        camp = $gameStore.placeList.find(place => place.name === '피난기지');\r\n        actionTable = $gameStore.actionTable;\r\n    }\r\n</script>\r\n\r\n<div class=\"flex-column\">\r\n    <div style=\"display: flex;justify-content: center;background-color: #0f6674;color:white;\">\r\n        <div style=\"line-height: 30px\">목표 : <span class=\"game-title\">{goal}</span></div>\r\n        <div style=\"line-height: 30px;display: flex;margin-left: 10px\">\r\n            {#if currentRiskCard != null}\r\n                <div>\r\n                위기상황 : <span class=\"game-title\">{currentRiskCard.name}</span>\r\n                지금까지 모은 아이템수 : <span class=\"game-title\">{successRiskCardList.length}</span>\r\n                </div>\r\n                <div style=\"display:flex;margin-left: 10px;align-items: center\">\r\n                    {#each successRiskCardList as successRiskCard (successRiskCard)}\r\n                        <div style=\"width:25px;height:25px;border-radius:25px;background-color:lightgreen;border:1px solid greenyellow;margin-right: 5px\"\r\n                             animate:flip\r\n                             in:itemCardReceive={{key: successRiskCard}}\r\n                             out:itemCardSend={{key: successRiskCard}}></div>\r\n                    {/each}\r\n                </div>\r\n            {/if}\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"flex\" style=\"padding: 10px;justify-content: space-evenly\">\r\n        {#each placeList as place, placeIndex}\r\n            <div class=\"flex place-header {gameStore.getPlaceClassName(place)}\" on:click={gameStore.changePlaceByName(place.name)}>\r\n                {#if place.name == '피난기지'}\r\n                    <table>\r\n                        <tr>\r\n                            <td colspan=\"4\" style=\"height: 26px\">{place.name} ({place.index + 1})\r\n                                {#each playerList as player, index}\r\n                                    <span style=\"border-radius: 10px;border: 1px solid darkgray;padding: 2px;background-color: {gameStore.getPlayerColor(index)}\">{player.name} : {place.playerSurvivorMap[player.name].length}</span>\r\n                                    &nbsp;\r\n                                {/each}\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>좀비수</td>\r\n                            <td>{place.currentZombieCount}/{place.maxZombieCount}\r\n                                <div>\r\n                                    <div style=\"display: flex;width:50px;flex-wrap: wrap\">\r\n                                        {#each place.currentZombieList as zombie (zombie)}\r\n                                            <div animate:flip style=\"width: 10px;height:10px;background-color:lightsalmon;border:1px solid red\"></div>\r\n                                        {/each}\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                            <td>바리케이트수</td>\r\n                            <td>{place.currentBarricadeCount}/{place.maxZombieCount}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>생존자수</td>\r\n                            <td>\r\n                                <div style=\"display: flex; flex-direction: column\">\r\n                                    {place.survivorList.length}/{place.maxSurvivorCount}\r\n                                </div>\r\n                            </td>\r\n                            <td>식량(<span style=\"background-color: lightgreen\">{Math.floor(place.survivorList.length / 2)}필요</span>)</td>\r\n                            <td>{place.foodCount}\r\n                                <div>\r\n                                    <div style=\"display: flex;width:50px;flex-wrap: wrap\">\r\n                                        {#each camp.foodList as food, index (food)}\r\n                                            <div animate:flip\r\n                                                 in:foodReceive={{key: food}}\r\n                                                 out:foodSend={{key: food}}>\r\n                                                <div style=\"width: 10px;height:10px;background-color:#ffdc7a;border:1px solid #f7ce59\"></div>\r\n                                            </div>\r\n                                        {/each}\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>굶주림 토큰</td>\r\n                            <td>{place.starvingTokenCount}</td>\r\n                            <td>쓰레기</td>\r\n                            <td>{place.trashCount}\r\n                                <div>\r\n                                    <div style=\"display: flex;width:50px;flex-wrap: wrap\">\r\n                                        {#each camp.trashList as itemCard (itemCard)}\r\n                                            <div animate:flip\r\n                                                 in:trashReceive={{key: itemCard}}\r\n                                                 out:trashSend={{key: itemCard}}>\r\n                                                <div style=\"width: 10px;height:10px;background-color: lightgreen;border:1px solid greenyellow\"></div>\r\n                                            </div>\r\n                                        {/each}\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                {:else}\r\n                    <table>\r\n                        <tr>\r\n                            <td colspan=\"2\" style=\"height: 26px\">{place.name} ({place.index + 1})\r\n                                {#each playerList as player, index}\r\n                                    <span style=\"border-radius: 10px;border: 1px solid darkgray;padding: 2px;background-color: {gameStore.getPlayerColor(index)}\">{player.name} : {place.playerSurvivorMap[player.name].length}</span>\r\n                                    &nbsp;\r\n                                {/each}\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>좀비수</td>\r\n                            <td>{place.currentZombieCount}/{place.maxZombieCount}\r\n                                <div>\r\n                                    <div style=\"display: flex;width:50px;flex-wrap: wrap\">\r\n                                        {#each place.currentZombieList as zombie (zombie)}\r\n                                            <div animate:flip style=\"width: 10px;height:10px;background-color:lightsalmon;border:1px solid red\"></div>\r\n                                        {/each}\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>바리케이트수</td>\r\n                            <td>{place.currentBarricadeCount}/{place.maxZombieCount}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>생존자수</td>\r\n                            <td>\r\n                                <div style=\"display: flex; flex-direction: column\">\r\n                                    {place.survivorList.length}/{place.maxSurvivorCount}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>아이템카드수</td>\r\n                            <td>{place.itemCardList.length}\r\n                                <div>\r\n                                    <div style=\"display: flex;width:25px;flex-wrap: wrap\">\r\n                                        {#each place.itemCardList as itemCard (itemCard)}\r\n                                            <div animate:flip style=\"width: 1px;height:1px;\"\r\n                                                in:placeItemCardReceive={{key: itemCard}}\r\n                                                out:placeItemCardSend={{key: itemCard}}></div>\r\n                                        {/each}\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                {/if}\r\n            </div>\r\n        {/each}\r\n    </div>\r\n\r\n    {#if messageList.length > 0}\r\n        <div style=\"display: flex;flex-direction: column;justify-content: center;margin: 10px 300px;\">\r\n            {#each messageList as message, index}\r\n                <div>{index + 1} {message}</div>\r\n            {/each}\r\n        </div>\r\n    {/if}\r\n\r\n    <div class=\"place-container\">\r\n    {#each placeList as place, placeIndex}\r\n        <div class=\"place-container {place.activeClassName}\">\r\n            <Place placeIndex={placeIndex}></Place>\r\n        </div>\r\n    {/each}\r\n    </div>\r\n</div>","<script>\r\n    import gameStore from \"./gameStore\";\r\n    import Player from \"./Player.svelte\";\r\n    import Place from \"./Place.svelte\";\r\n    import Action from \"./Action.svelte\";\r\n    import PlaceList from \"./PlaceList.svelte\";\r\n\r\n    let placeList;\r\n    let modalType;\r\n    let modalClass;\r\n    let currentSurvivor;\r\n    let woundSurvivorList = [];\r\n\r\n    gameStore.updateAll();\r\n\r\n    $: {\r\n        placeList = $gameStore.placeList;\r\n        modalType = $gameStore.modalType;\r\n        modalClass = $gameStore.modalClass;\r\n        currentSurvivor = $gameStore.currentSurvivor;\r\n\r\n        if ($gameStore.currentPlace) {\r\n            woundSurvivorList = $gameStore.currentPlace\r\n                .survivorList\r\n                .filter(survivor => survivor.wound > 0);\r\n        }\r\n\r\n        console.log('>>> modalType', modalType);\r\n        console.log('>>> woundSurvivorList', woundSurvivorList);\r\n    }\r\n</script>\r\n\r\n<svelte:window on:keydown={gameStore.changePlace}/>\r\n\r\n<div class=\"modal {modalClass}\">\r\n    <div class=\"modal_body\">\r\n        {#if currentSurvivor != null}\r\n            {#if modalType == 'move'}\r\n                <div style=\"display: flex;flex-direction: column\">\r\n                    <div style=\"display: flex;margin-top: 10px\">\r\n                        <strong>{currentSurvivor.name}</strong>\r\n                    </div>\r\n                    <div style=\"display: flex;margin-top: 10px\">\r\n                        {#each currentSurvivor.targetPlaceList as place}\r\n                            <button class=\"none-action-dice-button\"\r\n                                    disabled={place.disabled}\r\n                                    style=\"margin-right: 5px\"\r\n                                    on:click={gameStore.move(currentSurvivor, place.name)}>{place.name}</button>\r\n                        {/each}\r\n                    </div>\r\n                    <div style=\"display: flex;margin-top: 10px\">위험노출 주사위 없이 이동</div>\r\n                    <div style=\"display: flex;flex-direction: row-reverse;\">\r\n                        <button>취소</button>\r\n                    </div>\r\n                </div>\r\n            {:else if modalType == 'care'}\r\n                <div style=\"display: flex;flex-direction: column\">\r\n                    {#each woundSurvivorList as woundSurvivor}\r\n                        <div style=\"display: flex;margin-top: 10px\">\r\n                            <button on:click={()=>gameStore.care(woundSurvivor)}>{woundSurvivor.name} 치료</button>\r\n                        </div>\r\n                    {/each}\r\n                    <div style=\"display: flex;flex-direction: row-reverse;\">\r\n                        <button>취소</button>\r\n                    </div>\r\n                </div>\r\n            {/if}\r\n        {/if}\r\n    </div>\r\n</div>\r\n\r\n<div class=\"board flex\">\r\n    <div class=\"board-item-section board-player-section\"><Player playerIndex={0}></Player></div>\r\n    <div class=\"board-item-section board-content-section\"><PlaceList></PlaceList></div>\r\n    <div class=\"board-item-section board-player-section\"><Player playerIndex={1}></Player></div>\r\n</div>","import App from './App.svelte';\r\n\r\nconst app = new App({\r\n    target: document.body,\r\n    props: {\r\n        name: 'world'\r\n    }\r\n});\r\n\r\nexport default app;"],"names":["noop","identity","x","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","src_url_equal","element_src","url","document","createElement","href","subscribe","store","callbacks","unsub","unsubscribe","get_store_value","value","_","component_subscribe","component","callback","$$","on_destroy","push","is_client","window","now","performance","Date","raf","cb","requestAnimationFrame","tasks","Set","run_tasks","task","c","delete","f","size","loop","promise","Promise","fulfill","add","abort","append","target","node","appendChild","get_root_for_style","root","getRootNode","ownerDocument","host","append_empty_stylesheet","style_element","element","style","head","append_stylesheet","sheet","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","name","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","removeProperty","setProperty","managed_styles","Map","current_component","active","create_rule","duration","delay","ease","uid","step","keyframes","p","t","rule","str","hash","charCodeAt","doc","stylesheet","rules","get","info","set","create_style_information","insertRule","cssRules","animation","delete_rule","previous","split","next","filter","anim","indexOf","deleted","join","deleteRule","clear","create_animation","from","params","to","getBoundingClientRect","left","right","top","bottom","easing","start","start_time","end","tick","css","running","started","stop","fix_position","getComputedStyle","position","width","height","add_transform","transform","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","resolve","update_scheduled","add_render_callback","seen_callbacks","flushidx","flush","saved_component","update","pop","has","fragment","before_update","dirty","ctx","after_update","wait","then","dispatch","direction","kind","dispatchEvent","type","detail","bubbles","e","createEvent","initCustomEvent","custom_event","outroing","outros","group_outros","r","check_outros","transition_in","block","local","transition_out","o","null_transition","create_in_transition","animation_name","config","cleanup","go","end_time","invalidate","create_out_transition","group","reset","destroy_block","lookup","outro_and_destroy_block","fix_and_destroy_block","fix_and_outro_and_destroy_block","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","get_context","n","old_indexes","new_blocks","new_lookup","deltas","child_ctx","Math","abs","will_move","did_move","m","first","new_block","old_block","new_key","old_key","create_component","mount_component","customElement","on_mount","new_on_destroy","map","destroy_component","make_dirty","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","skip_bound","ready","ret","rest","hydrate","nodes","Array","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","index","splice","$set","$$props","obj","$$set","keys","subscriber_queue","itemCardList","description","category","feature","targetCount","placeNameList","place","itemCard","canPreventRisk","canExecute","survivorList","job","power","attack","search","ability","survivor","wound","playerIndex","done","actionTable","foodList","noRollDangerDice","canUseAbility","playerName","placeList","maxSurvivorCount","survivorLocationList","foodCount","starvingTokenCount","weakTokenCount","trashCount","entranceList","maxZombieCount","zombieCount","barricadeCount","noiseTokenCount","activieSurvive","currentZombieCount","currentBarricadeCount","currentZombieList","entrance","zombieList","activeClassName","game","fail","itemCardAnimationType","modalClass","modalType","actionType","currentActionIndex","goal","messageList","zombieIndex","entranceZombieIndex","campFoodIndex","campTrashIndex","selectedItemCardFeature","selectedActionIndex","currentPlace","currentPlaceName","currentRiskCard","riskCard","dangerDice","currentSurvivor","successRiskCardList","currentPlayer","canTurn","canAction","rollDice","turn","round","moral","survivorCount","deadSurvivorCount","deadSurvivorList","zombieTokenCount","deadZombieCount","deadZombieList","itemCardCount","riskCardList","condition","actionList","initItemCardList","playerList","color","actionDiceList","reduce","woundedCount","subscribers","new_value","run_queue","subscriber","writable","updateAll","g","u2","u","gameStore","minusRound","plusMoral","minusMoral","initRiskCard","sort","random","initItemCard","player","slice","createNewItemCard","find","item","getPlayerColorForSurvivor","initSurvivor","updatePlace","trashList","initPlayerSurvivorMap","playerSurvivorMap","getCamp","getSurvivorList","flatMap","getCurrentPlayer","getCurrentPlayerColor","getPlayerColor","initCamp","camp","care","woundSurvivor","alert","move","placeName","changePlaceByName","showMessage","processFood","floor","oldMoral","newMoral","removeFood","processTrash","currentCamp","processRisk","action","inviteZombie","undefined","removeAllBarricade","dead","showZombie","changePlace","keyCode","console","log","getPlayerSurvivorList","updateSurvivor","woundList","sum","updateZombie","updateItemCard","itemCardIndex","placeMatch","updateItemCardTable","itemCardTable","previousValue","row","count","updateSurvivorCount","setDisabled","updateSurvivorActionTable","dice","attackItemList","searchItemList","careItemList","foodItemList","barricadeItemList","food","barricade","clean","invite","itemFood","cleanItemList","actionItemCard","enabled","values","targetPlaceList","disabled","targetPlace","doneLength","isCurrentPlayerOfSurvivor","check","actionIndex","plusPower","addFood","selectItemCard","selectItemCardWithoutDice","preventRisk","currentItemCard","searchInternal","addSurvivor","newSurvivor","newItemCard","setUseAbility","targetSurvivor","useAbility","killZombieWithGame","rescued","rescueItemCard","createBarricade","use","async","cancel","rollDangerActionDice","currentEntrance","showZombieCount","message","randomIndex","choiceRiskCard","rollActionDice","currentSurvivorName","killZombie","saveMoveCount","rollDangerDice","confirm","result","startsWith","getPlaceClassName","cubicOut","flip","ox","oy","transformOrigin","parseFloat","dx","dy","sqrt","y","sx","sy","crossfade","_a","fallback","defaults","s","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","__rest","to_receive","to_send","transition","items","counterparts","rect","dw","dh","opacity","itemCardCrossfade","placeItemCardCrossfade","foodCrossfade","trashCrossfade","deadSurvivorCrossfade","deadZombieCrossfade","itemCardSend","itemCardReceive","placeItemCardSend","placeItemCardReceive","trashSend","trashReceive","send","receive","$gameStore","preventDefault","foodSend","foodReceive","deadSurvivorSend","deadSurvivorReceive","deadZombieSend","deadZombieReceive","placeIndex","woundSurvivorList","body"],"mappings":"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ClBhB,aAAc,GACdiB,qBAAsB,GACtBC,UAAW,EACXC,mBAAoB,EACpBC,eAAgB,EAChBC,WAAY,EACZ/B,aAAc,GACdgC,aAAc,CACV,CACIC,eAAgB,EAChBC,YAAa,EACbC,eAAgB,GAEpB,CACIF,eAAgB,EAChBC,YAAa,EACbC,eAAgB,GAEpB,CACIF,eAAgB,EAChBC,YAAa,EACbC,eAAgB,GAEpB,CACIF,eAAgB,EAChBC,YAAa,EACbC,eAAgB,GAEpB,CACIF,eAAgB,EAChBC,YAAa,EACbC,eAAgB,GAEpB,CACIF,eAAgB,EAChBC,YAAa,EACbC,eAAgB,KAI5B,CACIvP,KAAM,MACNoP,aAAc,CACV,CACIC,eAAgB,EAChBC,YAAa,EACbC,eAAgB,IAGxBT,iBAAkB,EAClBhB,aAAc,GACdiB,qBAAsB,GACtBS,gBAAiB,EACjBpC,aAAc,CACV,MACA,OACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,SAGR,CACIpN,KAAM,KACNoP,aAAc,CACV,CACIC,eAAgB,EAChBC,YAAa,EACbC,eAAgB,IAGxBT,iBAAkB,EAClBhB,aAAc,GACdiB,qBAAsB,GACtBS,gBAAiB,EACjBpC,aAAc,CACV,OACA,MACA,IACA,IACA,IACA,IACA,IACA,MACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,SAGR,CACIpN,KAAM,KACNoP,aAAc,CACV,CACIC,eAAgB,EAChBC,YAAa,EACbC,eAAgB,IAGxBT,iBAAkB,EAClBhB,aAAc,GACdiB,qBAAsB,GACtBS,gBAAiB,EACjBpC,aAAc,CACV,OACA,QACA,KACA,MACA,IACA,IACA,IACA,SACA,QACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,SAGR,CACIpN,KAAM,KACN8O,iBAAkB,EAClBM,aAAc,CACV,CACIC,eAAgB,EAChBC,YAAa,EACbC,eAAgB,IAGxBzB,aAAc,GACdiB,qBAAsB,GACtBS,gBAAiB,EACjBpC,aAAc,CACV,OACA,OACA,OACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,SAGR,CACIpN,KAAM,MACNoP,aAAc,CACV,CACIC,eAAgB,EAChBC,YAAa,EACbC,eAAgB,IAGxBT,iBAAkB,EAClBhB,aAAc,GACdiB,qBAAsB,GACtBQ,eAAgB,EAChBC,gBAAiB,EACjBpC,aAAc,CACV,MACA,OACA,OACA,SACA,UACA,SACA,SACA,UACA,UACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,SAGR,CACIpN,KAAM,MACNoP,aAAc,CACV,CACIC,eAAgB,EAChBC,YAAa,EACbC,eAAgB,IAGxBT,iBAAkB,EAClBhB,aAAc,GACdiB,qBAAsB,GACtBS,gBAAiB,EACjBpC,aAAc,CACV,MACA,OACA,OACA,QACA,OACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,UAKZU,GAAa3S,SAAQiT,IACjBA,EAASqB,eAAiB,QAG9BZ,GAAU1T,SAAQ,CAACuS,EAAOd,KACtBc,EAAMd,MAAQA,EACdc,EAAMgC,mBAAqB,EAC3BhC,EAAMiC,sBAAwB,EAC9BjC,EAAM2B,eAAiB,EACvB3B,EAAMkC,kBAAoB,GAE1BlC,EAAM0B,aAAajU,SAAQ0U,IACvBA,EAASC,WAAa,MAItBpC,EAAMqC,gBADI,IAAVnD,EACwB,SAEA,cC3RhC,MCKMoD,GAAO,CACTC,MAAM,EACNC,sBAAuB,OACvBC,WAAY,GACZC,UAAW,GACXC,WAAY,GACZC,oBAAqB,EACrBC,KAAM,cACNC,YAAa,GACbC,YAAa,EACbC,oBAAqB,EACrBC,cAAe,EACfC,eAAgB,EAChBC,wBAAyB,KACzBC,oBAAqB,EACrBtC,YAAa,GACbuC,aAAc,KACdC,iBAAkB,OAClBC,gBAAiB,KACjBC,UAAU,EACVC,YAAY,EACZC,gBAAiB,KACjBC,oBAAqB,GACrBC,cAAe,KACfC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,KAAM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"}